
CodigoSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08003850  08003850  00013850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa0  08003aa0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa0  08003aa0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa0  08003aa0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  200001dc  08003c84  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003c84  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f68  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000121c  00000000  00000000  0002516d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000540  00000000  00000000  00026390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000498  00000000  00000000  000268d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016216  00000000  00000000  00026d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e01  00000000  00000000  0003cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080028  00000000  00000000  00041d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1da7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  000c1e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08003838 	.word	0x08003838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08003838 	.word	0x08003838

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fa02 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f805 	bl	8000a9e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f872 	bl	8000b7c <MX_GPIO_Init>
  MX_CAN_Init();
 8000a98:	f000 f83c 	bl	8000b14 <MX_CAN_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <main+0x14>

08000a9e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b090      	sub	sp, #64	; 0x40
 8000aa2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	2228      	movs	r2, #40	; 0x28
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 f9a3 	bl	8001df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fd7a 	bl	80015cc <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000ade:	f000 f8b9 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 ffe6 	bl	8001acc <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b06:	f000 f8a5 	bl	8000c54 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3740      	adds	r7, #64	; 0x40
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <MX_CAN_Init+0x64>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b20:	2210      	movs	r2, #16
 8000b22:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_CAN_Init+0x60>)
 8000b62:	f000 f9f9 	bl	8000f58 <HAL_CAN_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 f872 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000204 	.word	0x20000204
 8000b78:	40006400 	.word	0x40006400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_GPIO_Init+0xcc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Trans1_Pin Trans2_Pin Bateria_Pin IgnitionPin_Pin
                           Comb3_Pin */
  GPIO_InitStruct.Pin = Trans1_Pin|Trans2_Pin|Bateria_Pin|IgnitionPin_Pin
 8000bd8:	f648 0307 	movw	r3, #34823	; 0x8807
 8000bdc:	613b      	str	r3, [r7, #16]
                          |Comb3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000bee:	f000 fb93 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SCK_Pin SO_Pin Comb2_Pin
                           Comb1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SCK_Pin|SO_Pin|Comb2_Pin
 8000bf2:	f247 0318 	movw	r3, #28696	; 0x7018
 8000bf6:	613b      	str	r3, [r7, #16]
                          |Comb1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000c08:	f000 fb86 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : Serial_TX_Pin */
  GPIO_InitStruct.Pin = Serial_TX_Pin;
 8000c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Serial_TX_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000c22:	f000 fb79 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : Serial_RX_Pin */
  GPIO_InitStruct.Pin = Serial_RX_Pin;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Serial_RX_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_GPIO_Init+0xd0>)
 8000c3c:	f000 fb6c 	bl	8001318 <HAL_GPIO_Init>

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <Error_Handler+0x6>

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_MspInit+0x60>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_MspInit+0x60>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <HAL_CAN_MspInit+0xb0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d143      	bne.n	8000d68 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <HAL_CAN_MspInit+0xb4>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_CAN_MspInit+0xb4>)
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cea:	61d3      	str	r3, [r2, #28]
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <HAL_CAN_MspInit+0xb4>)
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_CAN_MspInit+0xb4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_CAN_MspInit+0xb4>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_CAN_MspInit+0xb4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <HAL_CAN_MspInit+0xb8>)
 8000d26:	f000 faf7 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <HAL_CAN_MspInit+0xb8>)
 8000d40:	f000 faea 	bl	8001318 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_CAN_MspInit+0xbc>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_CAN_MspInit+0xbc>)
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40006400 	.word	0x40006400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010000 	.word	0x40010000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f8ab 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f000 ffd0 	bl	8001da4 <__errno>
 8000e04:	4602      	mov	r2, r0
 8000e06:	230c      	movs	r3, #12
 8000e08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20005000 	.word	0x20005000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	200001f8 	.word	0x200001f8
 8000e38:	20000238 	.word	0x20000238

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e4a:	e003      	b.n	8000e54 <LoopCopyDataInit>

08000e4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e52:	3104      	adds	r1, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e54:	480a      	ldr	r0, [pc, #40]	; (8000e80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e5c:	d3f6      	bcc.n	8000e4c <CopyDataInit>
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e60:	e002      	b.n	8000e68 <LoopFillZerobss>

08000e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e64:	f842 3b04 	str.w	r3, [r2], #4

08000e68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e6c:	d3f9      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6e:	f7ff ffe5 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f000 ff9d 	bl	8001db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fe07 	bl	8000a88 <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e7c:	08003aa8 	.word	0x08003aa8
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e84:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000e88:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8000e8c:	20000234 	.word	0x20000234

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fa03 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fed4 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fa0d 	bl	80012fe <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f9e3 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	2000022c 	.word	0x2000022c

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000022c 	.word	0x2000022c

08000f58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0ed      	b.n	8001146 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fea2 	bl	8000cc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0202 	bic.w	r2, r2, #2
 8000f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f8c:	f7ff ffda 	bl	8000f44 <HAL_GetTick>
 8000f90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f92:	e012      	b.n	8000fba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f94:	f7ff ffd6 	bl	8000f44 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b0a      	cmp	r3, #10
 8000fa0:	d90b      	bls.n	8000fba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0c5      	b.n	8001146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e5      	bne.n	8000f94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd8:	f7ff ffb4 	bl	8000f44 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fde:	e012      	b.n	8001006 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe0:	f7ff ffb0 	bl	8000f44 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b0a      	cmp	r3, #10
 8000fec:	d90b      	bls.n	8001006 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e09f      	b.n	8001146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0e5      	beq.n	8000fe0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7e1b      	ldrb	r3, [r3, #24]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e007      	b.n	800103e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7e5b      	ldrb	r3, [r3, #25]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001066:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7e9b      	ldrb	r3, [r3, #26]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e007      	b.n	8001092 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0220 	bic.w	r2, r2, #32
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7edb      	ldrb	r3, [r3, #27]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0210 	bic.w	r2, r2, #16
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e007      	b.n	80010bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0210 	orr.w	r2, r2, #16
 80010ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7f1b      	ldrb	r3, [r3, #28]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0208 	orr.w	r2, r2, #8
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0208 	bic.w	r2, r2, #8
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7f5b      	ldrb	r3, [r3, #29]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0204 	orr.w	r2, r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e007      	b.n	8001110 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0204 	bic.w	r2, r2, #4
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	ea42 0103 	orr.w	r1, r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff49 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff5e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb0 	bl	800126c <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e127      	b.n	800157c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8116 	bne.w	8001576 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d034      	beq.n	80013bc <HAL_GPIO_Init+0xa4>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d80d      	bhi.n	8001372 <HAL_GPIO_Init+0x5a>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x9a>
 800135a:	2b02      	cmp	r3, #2
 800135c:	d804      	bhi.n	8001368 <HAL_GPIO_Init+0x50>
 800135e:	2b00      	cmp	r3, #0
 8001360:	d031      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d01c      	beq.n	80013a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001366:	e048      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001368:	2b03      	cmp	r3, #3
 800136a:	d043      	beq.n	80013f4 <HAL_GPIO_Init+0xdc>
 800136c:	2b11      	cmp	r3, #17
 800136e:	d01b      	beq.n	80013a8 <HAL_GPIO_Init+0x90>
          break;
 8001370:	e043      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001372:	4a89      	ldr	r2, [pc, #548]	; (8001598 <HAL_GPIO_Init+0x280>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d026      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001378:	4a87      	ldr	r2, [pc, #540]	; (8001598 <HAL_GPIO_Init+0x280>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d806      	bhi.n	800138c <HAL_GPIO_Init+0x74>
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <HAL_GPIO_Init+0x284>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d020      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001384:	4a86      	ldr	r2, [pc, #536]	; (80015a0 <HAL_GPIO_Init+0x288>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01d      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
          break;
 800138a:	e036      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800138c:	4a85      	ldr	r2, [pc, #532]	; (80015a4 <HAL_GPIO_Init+0x28c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001392:	4a85      	ldr	r2, [pc, #532]	; (80015a8 <HAL_GPIO_Init+0x290>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d016      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001398:	4a84      	ldr	r2, [pc, #528]	; (80015ac <HAL_GPIO_Init+0x294>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
          break;
 800139e:	e02c      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e028      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	3304      	adds	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e023      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	3308      	adds	r3, #8
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e01e      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	330c      	adds	r3, #12
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e019      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ce:	2304      	movs	r3, #4
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e012      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	611a      	str	r2, [r3, #16]
          break;
 80013e6:	e008      	b.n	80013fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	615a      	str	r2, [r3, #20]
          break;
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2bff      	cmp	r3, #255	; 0xff
 80013fe:	d801      	bhi.n	8001404 <HAL_GPIO_Init+0xec>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e001      	b.n	8001408 <HAL_GPIO_Init+0xf0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3304      	adds	r3, #4
 8001408:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2bff      	cmp	r3, #255	; 0xff
 800140e:	d802      	bhi.n	8001416 <HAL_GPIO_Init+0xfe>
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x104>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3b08      	subs	r3, #8
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	210f      	movs	r1, #15
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	401a      	ands	r2, r3
 800142e:	6a39      	ldr	r1, [r7, #32]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8096 	beq.w	8001576 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800144a:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_GPIO_Init+0x298>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001462:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x19e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4a      	ldr	r2, [pc, #296]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x19a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x196>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x192>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014b6:	2300      	movs	r3, #0
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c8:	493a      	ldr	r1, [pc, #232]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4938      	ldr	r1, [pc, #224]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	e006      	b.n	80014fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	492e      	ldr	r1, [pc, #184]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4929      	ldr	r1, [pc, #164]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001522:	4013      	ands	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
 800153e:	e006      	b.n	800154e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	43db      	mvns	r3, r3
 8001548:	491f      	ldr	r1, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800154a:	4013      	ands	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	491a      	ldr	r1, [pc, #104]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	60cb      	str	r3, [r1, #12]
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	4915      	ldr	r1, [pc, #84]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001572:	4013      	ands	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f aed0 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 800158c:	bf00      	nop
 800158e:	372c      	adds	r7, #44	; 0x2c
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	10210000 	.word	0x10210000
 800159c:	10110000 	.word	0x10110000
 80015a0:	10120000 	.word	0x10120000
 80015a4:	10310000 	.word	0x10310000
 80015a8:	10320000 	.word	0x10320000
 80015ac:	10220000 	.word	0x10220000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40011400 	.word	0x40011400
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e26c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8087 	beq.w	80016fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ec:	4b92      	ldr	r3, [pc, #584]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f8:	4b8f      	ldr	r3, [pc, #572]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d112      	bne.n	800162a <HAL_RCC_OscConfig+0x5e>
 8001604:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d10b      	bne.n	800162a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	4b89      	ldr	r3, [pc, #548]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d06c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x12c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d168      	bne.n	80016f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e246      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x76>
 8001634:	4b80      	ldr	r3, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a7f      	ldr	r2, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e02e      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b78      	ldr	r3, [pc, #480]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a77      	ldr	r2, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0xbc>
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6e      	ldr	r2, [pc, #440]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001688:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6a      	ldr	r2, [pc, #424]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a67      	ldr	r2, [pc, #412]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc4c 	bl	8000f44 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc48 	bl	8000f44 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1fa      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xe4>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc38 	bl	8000f44 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fc34 	bl	8000f44 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1e6      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x10c>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x18c>
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x176>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1ba      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4939      	ldr	r1, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_RCC_OscConfig+0x270>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fbed 	bl	8000f44 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fbe9 	bl	8000f44 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e19b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4927      	ldr	r1, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x270>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbcc 	bl	8000f44 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fbc8 	bl	8000f44 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e17a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d03a      	beq.n	8001850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d019      	beq.n	8001816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_RCC_OscConfig+0x274>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fbac 	bl	8000f44 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fba8 	bl	8000f44 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e15a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f000 faaa 	bl	8001d68 <RCC_Delay>
 8001814:	e01c      	b.n	8001850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RCC_OscConfig+0x274>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fb92 	bl	8000f44 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001822:	e00f      	b.n	8001844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff fb8e 	bl	8000f44 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d908      	bls.n	8001844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e140      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	42420000 	.word	0x42420000
 8001840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b9e      	ldr	r3, [pc, #632]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e9      	bne.n	8001824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a6 	beq.w	80019aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b97      	ldr	r3, [pc, #604]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10d      	bne.n	800188a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a93      	ldr	r2, [pc, #588]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b91      	ldr	r3, [pc, #580]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a8a      	ldr	r2, [pc, #552]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb4f 	bl	8000f44 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff fb4b 	bl	8000f44 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0fd      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x312>
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e02d      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x334>
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a75      	ldr	r2, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a72      	ldr	r2, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	e01c      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d10c      	bne.n	8001922 <HAL_RCC_OscConfig+0x356>
 8001908:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a6c      	ldr	r2, [pc, #432]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a69      	ldr	r2, [pc, #420]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e00b      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a66      	ldr	r2, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a63      	ldr	r2, [pc, #396]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d015      	beq.n	800196e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff faff 	bl	8000f44 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff fafb 	bl	8000f44 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0ab      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ee      	beq.n	800194a <HAL_RCC_OscConfig+0x37e>
 800196c:	e014      	b.n	8001998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fae9 	bl	8000f44 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff fae5 	bl	8000f44 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e095      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ee      	bne.n	8001976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8081 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d061      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d146      	bne.n	8001a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_OscConfig+0x4fc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fab9 	bl	8000f44 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff fab5 	bl	8000f44 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e067      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	492d      	ldr	r1, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a19      	ldr	r1, [r3, #32]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	430b      	orrs	r3, r1
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x4fc>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa89 	bl	8000f44 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fa85 	bl	8000f44 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e037      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46a>
 8001a54:	e02f      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_RCC_OscConfig+0x4fc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fa72 	bl	8000f44 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fa6e 	bl	8000f44 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e020      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x498>
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e013      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42420060 	.word	0x42420060

08001acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d0      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b67      	ldr	r3, [pc, #412]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	4965      	ldr	r1, [pc, #404]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0b8      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b28:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b40:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	494d      	ldr	r1, [pc, #308]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d040      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d115      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e073      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06b      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4936      	ldr	r1, [pc, #216]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f9c2 	bl	8000f44 <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff f9be 	bl	8000f44 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e053      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d210      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4922      	ldr	r1, [pc, #136]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e032      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4916      	ldr	r1, [pc, #88]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5a:	f000 f821 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c5e:	4601      	mov	r1, r0
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1cc>)
 8001c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1d0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f920 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08003864 	.word	0x08003864
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b490      	push	{r4, r7}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca8:	1d3c      	adds	r4, r7, #4
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cde:	e02d      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce2:	623b      	str	r3, [r7, #32]
      break;
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c5b      	lsrs	r3, r3, #17
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d12:	4413      	add	r3, r2
 8001d14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1e:	fb02 f203 	mul.w	r2, r2, r3
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	e004      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	623b      	str	r3, [r7, #32]
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d3e:	623b      	str	r3, [r7, #32]
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	6a3b      	ldr	r3, [r7, #32]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc90      	pop	{r4, r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	08003850 	.word	0x08003850
 8001d54:	08003860 	.word	0x08003860
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	003d0900 	.word	0x003d0900
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <RCC_Delay+0x34>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <RCC_Delay+0x38>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0a5b      	lsrs	r3, r3, #9
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d84:	bf00      	nop
  }
  while (Delay --);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <RCC_Delay+0x1c>
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <__errno>:
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <__errno+0x8>)
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <__libc_init_array>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	2500      	movs	r5, #0
 8001db4:	4e0c      	ldr	r6, [pc, #48]	; (8001de8 <__libc_init_array+0x38>)
 8001db6:	4c0d      	ldr	r4, [pc, #52]	; (8001dec <__libc_init_array+0x3c>)
 8001db8:	1ba4      	subs	r4, r4, r6
 8001dba:	10a4      	asrs	r4, r4, #2
 8001dbc:	42a5      	cmp	r5, r4
 8001dbe:	d109      	bne.n	8001dd4 <__libc_init_array+0x24>
 8001dc0:	f001 fd3a 	bl	8003838 <_init>
 8001dc4:	2500      	movs	r5, #0
 8001dc6:	4e0a      	ldr	r6, [pc, #40]	; (8001df0 <__libc_init_array+0x40>)
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <__libc_init_array+0x44>)
 8001dca:	1ba4      	subs	r4, r4, r6
 8001dcc:	10a4      	asrs	r4, r4, #2
 8001dce:	42a5      	cmp	r5, r4
 8001dd0:	d105      	bne.n	8001dde <__libc_init_array+0x2e>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd8:	4798      	blx	r3
 8001dda:	3501      	adds	r5, #1
 8001ddc:	e7ee      	b.n	8001dbc <__libc_init_array+0xc>
 8001dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001de2:	4798      	blx	r3
 8001de4:	3501      	adds	r5, #1
 8001de6:	e7f2      	b.n	8001dce <__libc_init_array+0x1e>
 8001de8:	08003aa0 	.word	0x08003aa0
 8001dec:	08003aa0 	.word	0x08003aa0
 8001df0:	08003aa0 	.word	0x08003aa0
 8001df4:	08003aa4 	.word	0x08003aa4

08001df8 <memset>:
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4402      	add	r2, r0
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <memset+0xa>
 8001e00:	4770      	bx	lr
 8001e02:	f803 1b01 	strb.w	r1, [r3], #1
 8001e06:	e7f9      	b.n	8001dfc <memset+0x4>

08001e08 <__cvt>:
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e0e:	461e      	mov	r6, r3
 8001e10:	bfbb      	ittet	lt
 8001e12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001e16:	461e      	movlt	r6, r3
 8001e18:	2300      	movge	r3, #0
 8001e1a:	232d      	movlt	r3, #45	; 0x2d
 8001e1c:	b088      	sub	sp, #32
 8001e1e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001e20:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8001e24:	f027 0720 	bic.w	r7, r7, #32
 8001e28:	2f46      	cmp	r7, #70	; 0x46
 8001e2a:	4614      	mov	r4, r2
 8001e2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001e2e:	700b      	strb	r3, [r1, #0]
 8001e30:	d004      	beq.n	8001e3c <__cvt+0x34>
 8001e32:	2f45      	cmp	r7, #69	; 0x45
 8001e34:	d100      	bne.n	8001e38 <__cvt+0x30>
 8001e36:	3501      	adds	r5, #1
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e000      	b.n	8001e3e <__cvt+0x36>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	aa07      	add	r2, sp, #28
 8001e40:	9204      	str	r2, [sp, #16]
 8001e42:	aa06      	add	r2, sp, #24
 8001e44:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001e48:	e9cd 3500 	strd	r3, r5, [sp]
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	4633      	mov	r3, r6
 8001e50:	f000 fba6 	bl	80025a0 <_dtoa_r>
 8001e54:	2f47      	cmp	r7, #71	; 0x47
 8001e56:	4680      	mov	r8, r0
 8001e58:	d102      	bne.n	8001e60 <__cvt+0x58>
 8001e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e5c:	07db      	lsls	r3, r3, #31
 8001e5e:	d526      	bpl.n	8001eae <__cvt+0xa6>
 8001e60:	2f46      	cmp	r7, #70	; 0x46
 8001e62:	eb08 0905 	add.w	r9, r8, r5
 8001e66:	d111      	bne.n	8001e8c <__cvt+0x84>
 8001e68:	f898 3000 	ldrb.w	r3, [r8]
 8001e6c:	2b30      	cmp	r3, #48	; 0x30
 8001e6e:	d10a      	bne.n	8001e86 <__cvt+0x7e>
 8001e70:	2200      	movs	r2, #0
 8001e72:	2300      	movs	r3, #0
 8001e74:	4620      	mov	r0, r4
 8001e76:	4631      	mov	r1, r6
 8001e78:	f7fe fd96 	bl	80009a8 <__aeabi_dcmpeq>
 8001e7c:	b918      	cbnz	r0, 8001e86 <__cvt+0x7e>
 8001e7e:	f1c5 0501 	rsb	r5, r5, #1
 8001e82:	f8ca 5000 	str.w	r5, [sl]
 8001e86:	f8da 3000 	ldr.w	r3, [sl]
 8001e8a:	4499      	add	r9, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2300      	movs	r3, #0
 8001e90:	4620      	mov	r0, r4
 8001e92:	4631      	mov	r1, r6
 8001e94:	f7fe fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8001e98:	b938      	cbnz	r0, 8001eaa <__cvt+0xa2>
 8001e9a:	2230      	movs	r2, #48	; 0x30
 8001e9c:	9b07      	ldr	r3, [sp, #28]
 8001e9e:	454b      	cmp	r3, r9
 8001ea0:	d205      	bcs.n	8001eae <__cvt+0xa6>
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	9107      	str	r1, [sp, #28]
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e7f8      	b.n	8001e9c <__cvt+0x94>
 8001eaa:	f8cd 901c 	str.w	r9, [sp, #28]
 8001eae:	4640      	mov	r0, r8
 8001eb0:	9b07      	ldr	r3, [sp, #28]
 8001eb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001eb4:	eba3 0308 	sub.w	r3, r3, r8
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	b008      	add	sp, #32
 8001ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001ec0 <__exponent>:
 8001ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	bfb4      	ite	lt
 8001ec6:	232d      	movlt	r3, #45	; 0x2d
 8001ec8:	232b      	movge	r3, #43	; 0x2b
 8001eca:	4604      	mov	r4, r0
 8001ecc:	bfb8      	it	lt
 8001ece:	4249      	neglt	r1, r1
 8001ed0:	2909      	cmp	r1, #9
 8001ed2:	f804 2b02 	strb.w	r2, [r4], #2
 8001ed6:	7043      	strb	r3, [r0, #1]
 8001ed8:	dd21      	ble.n	8001f1e <__exponent+0x5e>
 8001eda:	f10d 0307 	add.w	r3, sp, #7
 8001ede:	461f      	mov	r7, r3
 8001ee0:	260a      	movs	r6, #10
 8001ee2:	fb91 f5f6 	sdiv	r5, r1, r6
 8001ee6:	fb06 1115 	mls	r1, r6, r5, r1
 8001eea:	2d09      	cmp	r5, #9
 8001eec:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001ef0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001ef4:	f103 32ff 	add.w	r2, r3, #4294967295
 8001ef8:	4629      	mov	r1, r5
 8001efa:	dc09      	bgt.n	8001f10 <__exponent+0x50>
 8001efc:	3130      	adds	r1, #48	; 0x30
 8001efe:	3b02      	subs	r3, #2
 8001f00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001f04:	42bb      	cmp	r3, r7
 8001f06:	4622      	mov	r2, r4
 8001f08:	d304      	bcc.n	8001f14 <__exponent+0x54>
 8001f0a:	1a10      	subs	r0, r2, r0
 8001f0c:	b003      	add	sp, #12
 8001f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f10:	4613      	mov	r3, r2
 8001f12:	e7e6      	b.n	8001ee2 <__exponent+0x22>
 8001f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f18:	f804 2b01 	strb.w	r2, [r4], #1
 8001f1c:	e7f2      	b.n	8001f04 <__exponent+0x44>
 8001f1e:	2330      	movs	r3, #48	; 0x30
 8001f20:	4419      	add	r1, r3
 8001f22:	7083      	strb	r3, [r0, #2]
 8001f24:	1d02      	adds	r2, r0, #4
 8001f26:	70c1      	strb	r1, [r0, #3]
 8001f28:	e7ef      	b.n	8001f0a <__exponent+0x4a>
	...

08001f2c <_printf_float>:
 8001f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f30:	b091      	sub	sp, #68	; 0x44
 8001f32:	460c      	mov	r4, r1
 8001f34:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001f36:	4693      	mov	fp, r2
 8001f38:	461e      	mov	r6, r3
 8001f3a:	4605      	mov	r5, r0
 8001f3c:	f001 f8e4 	bl	8003108 <_localeconv_r>
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	9309      	str	r3, [sp, #36]	; 0x24
 8001f46:	f7fe f903 	bl	8000150 <strlen>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	900a      	str	r0, [sp, #40]	; 0x28
 8001f52:	3307      	adds	r3, #7
 8001f54:	f023 0307 	bic.w	r3, r3, #7
 8001f58:	f103 0208 	add.w	r2, r3, #8
 8001f5c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001f60:	f8d4 a000 	ldr.w	sl, [r4]
 8001f64:	603a      	str	r2, [r7, #0]
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001f6e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8001f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	4ba6      	ldr	r3, [pc, #664]	; (8002218 <_printf_float+0x2ec>)
 8001f7e:	4638      	mov	r0, r7
 8001f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001f82:	f7fe fd43 	bl	8000a0c <__aeabi_dcmpun>
 8001f86:	bb68      	cbnz	r0, 8001fe4 <_printf_float+0xb8>
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	4ba2      	ldr	r3, [pc, #648]	; (8002218 <_printf_float+0x2ec>)
 8001f8e:	4638      	mov	r0, r7
 8001f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001f92:	f7fe fd1d 	bl	80009d0 <__aeabi_dcmple>
 8001f96:	bb28      	cbnz	r0, 8001fe4 <_printf_float+0xb8>
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	f7fe fd0c 	bl	80009bc <__aeabi_dcmplt>
 8001fa4:	b110      	cbz	r0, 8001fac <_printf_float+0x80>
 8001fa6:	232d      	movs	r3, #45	; 0x2d
 8001fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fac:	4f9b      	ldr	r7, [pc, #620]	; (800221c <_printf_float+0x2f0>)
 8001fae:	4b9c      	ldr	r3, [pc, #624]	; (8002220 <_printf_float+0x2f4>)
 8001fb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001fb4:	bf98      	it	ls
 8001fb6:	461f      	movls	r7, r3
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f04f 0900 	mov.w	r9, #0
 8001fbe:	6123      	str	r3, [r4, #16]
 8001fc0:	f02a 0304 	bic.w	r3, sl, #4
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	9600      	str	r6, [sp, #0]
 8001fc8:	465b      	mov	r3, fp
 8001fca:	aa0f      	add	r2, sp, #60	; 0x3c
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 f9e2 	bl	8002398 <_printf_common>
 8001fd4:	3001      	adds	r0, #1
 8001fd6:	f040 8090 	bne.w	80020fa <_printf_float+0x1ce>
 8001fda:	f04f 30ff 	mov.w	r0, #4294967295
 8001fde:	b011      	add	sp, #68	; 0x44
 8001fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe4:	463a      	mov	r2, r7
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	4638      	mov	r0, r7
 8001fea:	4649      	mov	r1, r9
 8001fec:	f7fe fd0e 	bl	8000a0c <__aeabi_dcmpun>
 8001ff0:	b110      	cbz	r0, 8001ff8 <_printf_float+0xcc>
 8001ff2:	4f8c      	ldr	r7, [pc, #560]	; (8002224 <_printf_float+0x2f8>)
 8001ff4:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <_printf_float+0x2fc>)
 8001ff6:	e7db      	b.n	8001fb0 <_printf_float+0x84>
 8001ff8:	6863      	ldr	r3, [r4, #4]
 8001ffa:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8001ffe:	1c59      	adds	r1, r3, #1
 8002000:	a80d      	add	r0, sp, #52	; 0x34
 8002002:	a90e      	add	r1, sp, #56	; 0x38
 8002004:	d140      	bne.n	8002088 <_printf_float+0x15c>
 8002006:	2306      	movs	r3, #6
 8002008:	6063      	str	r3, [r4, #4]
 800200a:	f04f 0c00 	mov.w	ip, #0
 800200e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002012:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	6022      	str	r2, [r4, #0]
 800201a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	463a      	mov	r2, r7
 8002022:	464b      	mov	r3, r9
 8002024:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002028:	4628      	mov	r0, r5
 800202a:	f7ff feed 	bl	8001e08 <__cvt>
 800202e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002032:	2b47      	cmp	r3, #71	; 0x47
 8002034:	4607      	mov	r7, r0
 8002036:	d109      	bne.n	800204c <_printf_float+0x120>
 8002038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800203a:	1cd8      	adds	r0, r3, #3
 800203c:	db02      	blt.n	8002044 <_printf_float+0x118>
 800203e:	6862      	ldr	r2, [r4, #4]
 8002040:	4293      	cmp	r3, r2
 8002042:	dd47      	ble.n	80020d4 <_printf_float+0x1a8>
 8002044:	f1a8 0802 	sub.w	r8, r8, #2
 8002048:	fa5f f888 	uxtb.w	r8, r8
 800204c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002050:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002052:	d824      	bhi.n	800209e <_printf_float+0x172>
 8002054:	3901      	subs	r1, #1
 8002056:	4642      	mov	r2, r8
 8002058:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800205c:	910d      	str	r1, [sp, #52]	; 0x34
 800205e:	f7ff ff2f 	bl	8001ec0 <__exponent>
 8002062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002064:	4681      	mov	r9, r0
 8002066:	1813      	adds	r3, r2, r0
 8002068:	2a01      	cmp	r2, #1
 800206a:	6123      	str	r3, [r4, #16]
 800206c:	dc02      	bgt.n	8002074 <_printf_float+0x148>
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	07d1      	lsls	r1, r2, #31
 8002072:	d501      	bpl.n	8002078 <_printf_float+0x14c>
 8002074:	3301      	adds	r3, #1
 8002076:	6123      	str	r3, [r4, #16]
 8002078:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0a2      	beq.n	8001fc6 <_printf_float+0x9a>
 8002080:	232d      	movs	r3, #45	; 0x2d
 8002082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002086:	e79e      	b.n	8001fc6 <_printf_float+0x9a>
 8002088:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800208c:	f000 816e 	beq.w	800236c <_printf_float+0x440>
 8002090:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002094:	d1b9      	bne.n	800200a <_printf_float+0xde>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1b7      	bne.n	800200a <_printf_float+0xde>
 800209a:	2301      	movs	r3, #1
 800209c:	e7b4      	b.n	8002008 <_printf_float+0xdc>
 800209e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80020a2:	d119      	bne.n	80020d8 <_printf_float+0x1ac>
 80020a4:	2900      	cmp	r1, #0
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	dd0c      	ble.n	80020c4 <_printf_float+0x198>
 80020aa:	6121      	str	r1, [r4, #16]
 80020ac:	b913      	cbnz	r3, 80020b4 <_printf_float+0x188>
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	07d2      	lsls	r2, r2, #31
 80020b2:	d502      	bpl.n	80020ba <_printf_float+0x18e>
 80020b4:	3301      	adds	r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	6123      	str	r3, [r4, #16]
 80020ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020bc:	f04f 0900 	mov.w	r9, #0
 80020c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80020c2:	e7d9      	b.n	8002078 <_printf_float+0x14c>
 80020c4:	b913      	cbnz	r3, 80020cc <_printf_float+0x1a0>
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	07d0      	lsls	r0, r2, #31
 80020ca:	d501      	bpl.n	80020d0 <_printf_float+0x1a4>
 80020cc:	3302      	adds	r3, #2
 80020ce:	e7f3      	b.n	80020b8 <_printf_float+0x18c>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e7f1      	b.n	80020b8 <_printf_float+0x18c>
 80020d4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80020d8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80020dc:	4293      	cmp	r3, r2
 80020de:	db05      	blt.n	80020ec <_printf_float+0x1c0>
 80020e0:	6822      	ldr	r2, [r4, #0]
 80020e2:	6123      	str	r3, [r4, #16]
 80020e4:	07d1      	lsls	r1, r2, #31
 80020e6:	d5e8      	bpl.n	80020ba <_printf_float+0x18e>
 80020e8:	3301      	adds	r3, #1
 80020ea:	e7e5      	b.n	80020b8 <_printf_float+0x18c>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bfcc      	ite	gt
 80020f0:	2301      	movgt	r3, #1
 80020f2:	f1c3 0302 	rsble	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	e7de      	b.n	80020b8 <_printf_float+0x18c>
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	055a      	lsls	r2, r3, #21
 80020fe:	d407      	bmi.n	8002110 <_printf_float+0x1e4>
 8002100:	6923      	ldr	r3, [r4, #16]
 8002102:	463a      	mov	r2, r7
 8002104:	4659      	mov	r1, fp
 8002106:	4628      	mov	r0, r5
 8002108:	47b0      	blx	r6
 800210a:	3001      	adds	r0, #1
 800210c:	d129      	bne.n	8002162 <_printf_float+0x236>
 800210e:	e764      	b.n	8001fda <_printf_float+0xae>
 8002110:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002114:	f240 80d7 	bls.w	80022c6 <_printf_float+0x39a>
 8002118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800211c:	2200      	movs	r2, #0
 800211e:	2300      	movs	r3, #0
 8002120:	f7fe fc42 	bl	80009a8 <__aeabi_dcmpeq>
 8002124:	b388      	cbz	r0, 800218a <_printf_float+0x25e>
 8002126:	2301      	movs	r3, #1
 8002128:	4a40      	ldr	r2, [pc, #256]	; (800222c <_printf_float+0x300>)
 800212a:	4659      	mov	r1, fp
 800212c:	4628      	mov	r0, r5
 800212e:	47b0      	blx	r6
 8002130:	3001      	adds	r0, #1
 8002132:	f43f af52 	beq.w	8001fda <_printf_float+0xae>
 8002136:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800213a:	429a      	cmp	r2, r3
 800213c:	db02      	blt.n	8002144 <_printf_float+0x218>
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	07d8      	lsls	r0, r3, #31
 8002142:	d50e      	bpl.n	8002162 <_printf_float+0x236>
 8002144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002148:	4659      	mov	r1, fp
 800214a:	4628      	mov	r0, r5
 800214c:	47b0      	blx	r6
 800214e:	3001      	adds	r0, #1
 8002150:	f43f af43 	beq.w	8001fda <_printf_float+0xae>
 8002154:	2700      	movs	r7, #0
 8002156:	f104 081a 	add.w	r8, r4, #26
 800215a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800215c:	3b01      	subs	r3, #1
 800215e:	42bb      	cmp	r3, r7
 8002160:	dc09      	bgt.n	8002176 <_printf_float+0x24a>
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	079f      	lsls	r7, r3, #30
 8002166:	f100 80fd 	bmi.w	8002364 <_printf_float+0x438>
 800216a:	68e0      	ldr	r0, [r4, #12]
 800216c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800216e:	4298      	cmp	r0, r3
 8002170:	bfb8      	it	lt
 8002172:	4618      	movlt	r0, r3
 8002174:	e733      	b.n	8001fde <_printf_float+0xb2>
 8002176:	2301      	movs	r3, #1
 8002178:	4642      	mov	r2, r8
 800217a:	4659      	mov	r1, fp
 800217c:	4628      	mov	r0, r5
 800217e:	47b0      	blx	r6
 8002180:	3001      	adds	r0, #1
 8002182:	f43f af2a 	beq.w	8001fda <_printf_float+0xae>
 8002186:	3701      	adds	r7, #1
 8002188:	e7e7      	b.n	800215a <_printf_float+0x22e>
 800218a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800218c:	2b00      	cmp	r3, #0
 800218e:	dc2b      	bgt.n	80021e8 <_printf_float+0x2bc>
 8002190:	2301      	movs	r3, #1
 8002192:	4a26      	ldr	r2, [pc, #152]	; (800222c <_printf_float+0x300>)
 8002194:	4659      	mov	r1, fp
 8002196:	4628      	mov	r0, r5
 8002198:	47b0      	blx	r6
 800219a:	3001      	adds	r0, #1
 800219c:	f43f af1d 	beq.w	8001fda <_printf_float+0xae>
 80021a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021a2:	b923      	cbnz	r3, 80021ae <_printf_float+0x282>
 80021a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021a6:	b913      	cbnz	r3, 80021ae <_printf_float+0x282>
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	07d9      	lsls	r1, r3, #31
 80021ac:	d5d9      	bpl.n	8002162 <_printf_float+0x236>
 80021ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80021b2:	4659      	mov	r1, fp
 80021b4:	4628      	mov	r0, r5
 80021b6:	47b0      	blx	r6
 80021b8:	3001      	adds	r0, #1
 80021ba:	f43f af0e 	beq.w	8001fda <_printf_float+0xae>
 80021be:	f04f 0800 	mov.w	r8, #0
 80021c2:	f104 091a 	add.w	r9, r4, #26
 80021c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021c8:	425b      	negs	r3, r3
 80021ca:	4543      	cmp	r3, r8
 80021cc:	dc01      	bgt.n	80021d2 <_printf_float+0x2a6>
 80021ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021d0:	e797      	b.n	8002102 <_printf_float+0x1d6>
 80021d2:	2301      	movs	r3, #1
 80021d4:	464a      	mov	r2, r9
 80021d6:	4659      	mov	r1, fp
 80021d8:	4628      	mov	r0, r5
 80021da:	47b0      	blx	r6
 80021dc:	3001      	adds	r0, #1
 80021de:	f43f aefc 	beq.w	8001fda <_printf_float+0xae>
 80021e2:	f108 0801 	add.w	r8, r8, #1
 80021e6:	e7ee      	b.n	80021c6 <_printf_float+0x29a>
 80021e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80021ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021ec:	429a      	cmp	r2, r3
 80021ee:	bfa8      	it	ge
 80021f0:	461a      	movge	r2, r3
 80021f2:	2a00      	cmp	r2, #0
 80021f4:	4690      	mov	r8, r2
 80021f6:	dd07      	ble.n	8002208 <_printf_float+0x2dc>
 80021f8:	4613      	mov	r3, r2
 80021fa:	4659      	mov	r1, fp
 80021fc:	463a      	mov	r2, r7
 80021fe:	4628      	mov	r0, r5
 8002200:	47b0      	blx	r6
 8002202:	3001      	adds	r0, #1
 8002204:	f43f aee9 	beq.w	8001fda <_printf_float+0xae>
 8002208:	f104 031a 	add.w	r3, r4, #26
 800220c:	f04f 0a00 	mov.w	sl, #0
 8002210:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002214:	930b      	str	r3, [sp, #44]	; 0x2c
 8002216:	e015      	b.n	8002244 <_printf_float+0x318>
 8002218:	7fefffff 	.word	0x7fefffff
 800221c:	08003878 	.word	0x08003878
 8002220:	08003874 	.word	0x08003874
 8002224:	08003880 	.word	0x08003880
 8002228:	0800387c 	.word	0x0800387c
 800222c:	08003884 	.word	0x08003884
 8002230:	2301      	movs	r3, #1
 8002232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002234:	4659      	mov	r1, fp
 8002236:	4628      	mov	r0, r5
 8002238:	47b0      	blx	r6
 800223a:	3001      	adds	r0, #1
 800223c:	f43f aecd 	beq.w	8001fda <_printf_float+0xae>
 8002240:	f10a 0a01 	add.w	sl, sl, #1
 8002244:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002248:	eba9 0308 	sub.w	r3, r9, r8
 800224c:	4553      	cmp	r3, sl
 800224e:	dcef      	bgt.n	8002230 <_printf_float+0x304>
 8002250:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002254:	429a      	cmp	r2, r3
 8002256:	444f      	add	r7, r9
 8002258:	db14      	blt.n	8002284 <_printf_float+0x358>
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	07da      	lsls	r2, r3, #31
 800225e:	d411      	bmi.n	8002284 <_printf_float+0x358>
 8002260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002262:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002264:	eba3 0209 	sub.w	r2, r3, r9
 8002268:	eba3 0901 	sub.w	r9, r3, r1
 800226c:	4591      	cmp	r9, r2
 800226e:	bfa8      	it	ge
 8002270:	4691      	movge	r9, r2
 8002272:	f1b9 0f00 	cmp.w	r9, #0
 8002276:	dc0d      	bgt.n	8002294 <_printf_float+0x368>
 8002278:	2700      	movs	r7, #0
 800227a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800227e:	f104 081a 	add.w	r8, r4, #26
 8002282:	e018      	b.n	80022b6 <_printf_float+0x38a>
 8002284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002288:	4659      	mov	r1, fp
 800228a:	4628      	mov	r0, r5
 800228c:	47b0      	blx	r6
 800228e:	3001      	adds	r0, #1
 8002290:	d1e6      	bne.n	8002260 <_printf_float+0x334>
 8002292:	e6a2      	b.n	8001fda <_printf_float+0xae>
 8002294:	464b      	mov	r3, r9
 8002296:	463a      	mov	r2, r7
 8002298:	4659      	mov	r1, fp
 800229a:	4628      	mov	r0, r5
 800229c:	47b0      	blx	r6
 800229e:	3001      	adds	r0, #1
 80022a0:	d1ea      	bne.n	8002278 <_printf_float+0x34c>
 80022a2:	e69a      	b.n	8001fda <_printf_float+0xae>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4642      	mov	r2, r8
 80022a8:	4659      	mov	r1, fp
 80022aa:	4628      	mov	r0, r5
 80022ac:	47b0      	blx	r6
 80022ae:	3001      	adds	r0, #1
 80022b0:	f43f ae93 	beq.w	8001fda <_printf_float+0xae>
 80022b4:	3701      	adds	r7, #1
 80022b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	eba3 0309 	sub.w	r3, r3, r9
 80022c0:	42bb      	cmp	r3, r7
 80022c2:	dcef      	bgt.n	80022a4 <_printf_float+0x378>
 80022c4:	e74d      	b.n	8002162 <_printf_float+0x236>
 80022c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80022c8:	2a01      	cmp	r2, #1
 80022ca:	dc01      	bgt.n	80022d0 <_printf_float+0x3a4>
 80022cc:	07db      	lsls	r3, r3, #31
 80022ce:	d538      	bpl.n	8002342 <_printf_float+0x416>
 80022d0:	2301      	movs	r3, #1
 80022d2:	463a      	mov	r2, r7
 80022d4:	4659      	mov	r1, fp
 80022d6:	4628      	mov	r0, r5
 80022d8:	47b0      	blx	r6
 80022da:	3001      	adds	r0, #1
 80022dc:	f43f ae7d 	beq.w	8001fda <_printf_float+0xae>
 80022e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022e4:	4659      	mov	r1, fp
 80022e6:	4628      	mov	r0, r5
 80022e8:	47b0      	blx	r6
 80022ea:	3001      	adds	r0, #1
 80022ec:	f107 0701 	add.w	r7, r7, #1
 80022f0:	f43f ae73 	beq.w	8001fda <_printf_float+0xae>
 80022f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80022f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022fa:	2200      	movs	r2, #0
 80022fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8002300:	2300      	movs	r3, #0
 8002302:	f7fe fb51 	bl	80009a8 <__aeabi_dcmpeq>
 8002306:	b9c0      	cbnz	r0, 800233a <_printf_float+0x40e>
 8002308:	4643      	mov	r3, r8
 800230a:	463a      	mov	r2, r7
 800230c:	4659      	mov	r1, fp
 800230e:	4628      	mov	r0, r5
 8002310:	47b0      	blx	r6
 8002312:	3001      	adds	r0, #1
 8002314:	d10d      	bne.n	8002332 <_printf_float+0x406>
 8002316:	e660      	b.n	8001fda <_printf_float+0xae>
 8002318:	2301      	movs	r3, #1
 800231a:	4642      	mov	r2, r8
 800231c:	4659      	mov	r1, fp
 800231e:	4628      	mov	r0, r5
 8002320:	47b0      	blx	r6
 8002322:	3001      	adds	r0, #1
 8002324:	f43f ae59 	beq.w	8001fda <_printf_float+0xae>
 8002328:	3701      	adds	r7, #1
 800232a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800232c:	3b01      	subs	r3, #1
 800232e:	42bb      	cmp	r3, r7
 8002330:	dcf2      	bgt.n	8002318 <_printf_float+0x3ec>
 8002332:	464b      	mov	r3, r9
 8002334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002338:	e6e4      	b.n	8002104 <_printf_float+0x1d8>
 800233a:	2700      	movs	r7, #0
 800233c:	f104 081a 	add.w	r8, r4, #26
 8002340:	e7f3      	b.n	800232a <_printf_float+0x3fe>
 8002342:	2301      	movs	r3, #1
 8002344:	e7e1      	b.n	800230a <_printf_float+0x3de>
 8002346:	2301      	movs	r3, #1
 8002348:	4642      	mov	r2, r8
 800234a:	4659      	mov	r1, fp
 800234c:	4628      	mov	r0, r5
 800234e:	47b0      	blx	r6
 8002350:	3001      	adds	r0, #1
 8002352:	f43f ae42 	beq.w	8001fda <_printf_float+0xae>
 8002356:	3701      	adds	r7, #1
 8002358:	68e3      	ldr	r3, [r4, #12]
 800235a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	42bb      	cmp	r3, r7
 8002360:	dcf1      	bgt.n	8002346 <_printf_float+0x41a>
 8002362:	e702      	b.n	800216a <_printf_float+0x23e>
 8002364:	2700      	movs	r7, #0
 8002366:	f104 0819 	add.w	r8, r4, #25
 800236a:	e7f5      	b.n	8002358 <_printf_float+0x42c>
 800236c:	2b00      	cmp	r3, #0
 800236e:	f43f ae94 	beq.w	800209a <_printf_float+0x16e>
 8002372:	f04f 0c00 	mov.w	ip, #0
 8002376:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800237a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800237e:	6022      	str	r2, [r4, #0]
 8002380:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002384:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	463a      	mov	r2, r7
 800238c:	464b      	mov	r3, r9
 800238e:	4628      	mov	r0, r5
 8002390:	f7ff fd3a 	bl	8001e08 <__cvt>
 8002394:	4607      	mov	r7, r0
 8002396:	e64f      	b.n	8002038 <_printf_float+0x10c>

08002398 <_printf_common>:
 8002398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800239c:	4691      	mov	r9, r2
 800239e:	461f      	mov	r7, r3
 80023a0:	688a      	ldr	r2, [r1, #8]
 80023a2:	690b      	ldr	r3, [r1, #16]
 80023a4:	4606      	mov	r6, r0
 80023a6:	4293      	cmp	r3, r2
 80023a8:	bfb8      	it	lt
 80023aa:	4613      	movlt	r3, r2
 80023ac:	f8c9 3000 	str.w	r3, [r9]
 80023b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023b4:	460c      	mov	r4, r1
 80023b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023ba:	b112      	cbz	r2, 80023c2 <_printf_common+0x2a>
 80023bc:	3301      	adds	r3, #1
 80023be:	f8c9 3000 	str.w	r3, [r9]
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	0699      	lsls	r1, r3, #26
 80023c6:	bf42      	ittt	mi
 80023c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023cc:	3302      	addmi	r3, #2
 80023ce:	f8c9 3000 	strmi.w	r3, [r9]
 80023d2:	6825      	ldr	r5, [r4, #0]
 80023d4:	f015 0506 	ands.w	r5, r5, #6
 80023d8:	d107      	bne.n	80023ea <_printf_common+0x52>
 80023da:	f104 0a19 	add.w	sl, r4, #25
 80023de:	68e3      	ldr	r3, [r4, #12]
 80023e0:	f8d9 2000 	ldr.w	r2, [r9]
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	42ab      	cmp	r3, r5
 80023e8:	dc29      	bgt.n	800243e <_printf_common+0xa6>
 80023ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	3300      	adds	r3, #0
 80023f2:	bf18      	it	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	0692      	lsls	r2, r2, #26
 80023f8:	d42e      	bmi.n	8002458 <_printf_common+0xc0>
 80023fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023fe:	4639      	mov	r1, r7
 8002400:	4630      	mov	r0, r6
 8002402:	47c0      	blx	r8
 8002404:	3001      	adds	r0, #1
 8002406:	d021      	beq.n	800244c <_printf_common+0xb4>
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	68e5      	ldr	r5, [r4, #12]
 800240c:	f003 0306 	and.w	r3, r3, #6
 8002410:	2b04      	cmp	r3, #4
 8002412:	bf18      	it	ne
 8002414:	2500      	movne	r5, #0
 8002416:	f8d9 2000 	ldr.w	r2, [r9]
 800241a:	f04f 0900 	mov.w	r9, #0
 800241e:	bf08      	it	eq
 8002420:	1aad      	subeq	r5, r5, r2
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	6922      	ldr	r2, [r4, #16]
 8002426:	bf08      	it	eq
 8002428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800242c:	4293      	cmp	r3, r2
 800242e:	bfc4      	itt	gt
 8002430:	1a9b      	subgt	r3, r3, r2
 8002432:	18ed      	addgt	r5, r5, r3
 8002434:	341a      	adds	r4, #26
 8002436:	454d      	cmp	r5, r9
 8002438:	d11a      	bne.n	8002470 <_printf_common+0xd8>
 800243a:	2000      	movs	r0, #0
 800243c:	e008      	b.n	8002450 <_printf_common+0xb8>
 800243e:	2301      	movs	r3, #1
 8002440:	4652      	mov	r2, sl
 8002442:	4639      	mov	r1, r7
 8002444:	4630      	mov	r0, r6
 8002446:	47c0      	blx	r8
 8002448:	3001      	adds	r0, #1
 800244a:	d103      	bne.n	8002454 <_printf_common+0xbc>
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002454:	3501      	adds	r5, #1
 8002456:	e7c2      	b.n	80023de <_printf_common+0x46>
 8002458:	2030      	movs	r0, #48	; 0x30
 800245a:	18e1      	adds	r1, r4, r3
 800245c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002466:	4422      	add	r2, r4
 8002468:	3302      	adds	r3, #2
 800246a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800246e:	e7c4      	b.n	80023fa <_printf_common+0x62>
 8002470:	2301      	movs	r3, #1
 8002472:	4622      	mov	r2, r4
 8002474:	4639      	mov	r1, r7
 8002476:	4630      	mov	r0, r6
 8002478:	47c0      	blx	r8
 800247a:	3001      	adds	r0, #1
 800247c:	d0e6      	beq.n	800244c <_printf_common+0xb4>
 800247e:	f109 0901 	add.w	r9, r9, #1
 8002482:	e7d8      	b.n	8002436 <_printf_common+0x9e>

08002484 <quorem>:
 8002484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	6903      	ldr	r3, [r0, #16]
 800248a:	690c      	ldr	r4, [r1, #16]
 800248c:	4680      	mov	r8, r0
 800248e:	42a3      	cmp	r3, r4
 8002490:	f2c0 8084 	blt.w	800259c <quorem+0x118>
 8002494:	3c01      	subs	r4, #1
 8002496:	f101 0714 	add.w	r7, r1, #20
 800249a:	f100 0614 	add.w	r6, r0, #20
 800249e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80024a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80024a6:	3501      	adds	r5, #1
 80024a8:	fbb0 f5f5 	udiv	r5, r0, r5
 80024ac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80024b0:	eb06 030c 	add.w	r3, r6, ip
 80024b4:	eb07 090c 	add.w	r9, r7, ip
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	b39d      	cbz	r5, 8002524 <quorem+0xa0>
 80024bc:	f04f 0a00 	mov.w	sl, #0
 80024c0:	4638      	mov	r0, r7
 80024c2:	46b6      	mov	lr, r6
 80024c4:	46d3      	mov	fp, sl
 80024c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80024ca:	b293      	uxth	r3, r2
 80024cc:	fb05 a303 	mla	r3, r5, r3, sl
 80024d0:	0c12      	lsrs	r2, r2, #16
 80024d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80024d6:	fb05 a202 	mla	r2, r5, r2, sl
 80024da:	b29b      	uxth	r3, r3
 80024dc:	ebab 0303 	sub.w	r3, fp, r3
 80024e0:	f8de b000 	ldr.w	fp, [lr]
 80024e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80024e8:	fa1f fb8b 	uxth.w	fp, fp
 80024ec:	445b      	add	r3, fp
 80024ee:	fa1f fb82 	uxth.w	fp, r2
 80024f2:	f8de 2000 	ldr.w	r2, [lr]
 80024f6:	4581      	cmp	r9, r0
 80024f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80024fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002500:	b29b      	uxth	r3, r3
 8002502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002506:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800250a:	f84e 3b04 	str.w	r3, [lr], #4
 800250e:	d2da      	bcs.n	80024c6 <quorem+0x42>
 8002510:	f856 300c 	ldr.w	r3, [r6, ip]
 8002514:	b933      	cbnz	r3, 8002524 <quorem+0xa0>
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	3b04      	subs	r3, #4
 800251a:	429e      	cmp	r6, r3
 800251c:	461a      	mov	r2, r3
 800251e:	d331      	bcc.n	8002584 <quorem+0x100>
 8002520:	f8c8 4010 	str.w	r4, [r8, #16]
 8002524:	4640      	mov	r0, r8
 8002526:	f001 f825 	bl	8003574 <__mcmp>
 800252a:	2800      	cmp	r0, #0
 800252c:	db26      	blt.n	800257c <quorem+0xf8>
 800252e:	4630      	mov	r0, r6
 8002530:	f04f 0c00 	mov.w	ip, #0
 8002534:	3501      	adds	r5, #1
 8002536:	f857 1b04 	ldr.w	r1, [r7], #4
 800253a:	f8d0 e000 	ldr.w	lr, [r0]
 800253e:	b28b      	uxth	r3, r1
 8002540:	ebac 0303 	sub.w	r3, ip, r3
 8002544:	fa1f f28e 	uxth.w	r2, lr
 8002548:	4413      	add	r3, r2
 800254a:	0c0a      	lsrs	r2, r1, #16
 800254c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002554:	b29b      	uxth	r3, r3
 8002556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800255a:	45b9      	cmp	r9, r7
 800255c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002560:	f840 3b04 	str.w	r3, [r0], #4
 8002564:	d2e7      	bcs.n	8002536 <quorem+0xb2>
 8002566:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800256a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800256e:	b92a      	cbnz	r2, 800257c <quorem+0xf8>
 8002570:	3b04      	subs	r3, #4
 8002572:	429e      	cmp	r6, r3
 8002574:	461a      	mov	r2, r3
 8002576:	d30b      	bcc.n	8002590 <quorem+0x10c>
 8002578:	f8c8 4010 	str.w	r4, [r8, #16]
 800257c:	4628      	mov	r0, r5
 800257e:	b003      	add	sp, #12
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	3b04      	subs	r3, #4
 8002588:	2a00      	cmp	r2, #0
 800258a:	d1c9      	bne.n	8002520 <quorem+0x9c>
 800258c:	3c01      	subs	r4, #1
 800258e:	e7c4      	b.n	800251a <quorem+0x96>
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	3b04      	subs	r3, #4
 8002594:	2a00      	cmp	r2, #0
 8002596:	d1ef      	bne.n	8002578 <quorem+0xf4>
 8002598:	3c01      	subs	r4, #1
 800259a:	e7ea      	b.n	8002572 <quorem+0xee>
 800259c:	2000      	movs	r0, #0
 800259e:	e7ee      	b.n	800257e <quorem+0xfa>

080025a0 <_dtoa_r>:
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	4616      	mov	r6, r2
 80025a6:	461f      	mov	r7, r3
 80025a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80025aa:	b095      	sub	sp, #84	; 0x54
 80025ac:	4604      	mov	r4, r0
 80025ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80025b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80025b6:	b93d      	cbnz	r5, 80025c8 <_dtoa_r+0x28>
 80025b8:	2010      	movs	r0, #16
 80025ba:	f000 fdb3 	bl	8003124 <malloc>
 80025be:	6260      	str	r0, [r4, #36]	; 0x24
 80025c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80025c4:	6005      	str	r5, [r0, #0]
 80025c6:	60c5      	str	r5, [r0, #12]
 80025c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	b151      	cbz	r1, 80025e4 <_dtoa_r+0x44>
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	2301      	movs	r3, #1
 80025d2:	4093      	lsls	r3, r2
 80025d4:	604a      	str	r2, [r1, #4]
 80025d6:	608b      	str	r3, [r1, #8]
 80025d8:	4620      	mov	r0, r4
 80025da:	f000 fdea 	bl	80031b2 <_Bfree>
 80025de:	2200      	movs	r2, #0
 80025e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	1e3b      	subs	r3, r7, #0
 80025e6:	bfaf      	iteee	ge
 80025e8:	2300      	movge	r3, #0
 80025ea:	2201      	movlt	r2, #1
 80025ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	9303      	strlt	r3, [sp, #12]
 80025f2:	bfac      	ite	ge
 80025f4:	f8c8 3000 	strge.w	r3, [r8]
 80025f8:	f8c8 2000 	strlt.w	r2, [r8]
 80025fc:	4bae      	ldr	r3, [pc, #696]	; (80028b8 <_dtoa_r+0x318>)
 80025fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002602:	ea33 0308 	bics.w	r3, r3, r8
 8002606:	d11b      	bne.n	8002640 <_dtoa_r+0xa0>
 8002608:	f242 730f 	movw	r3, #9999	; 0x270f
 800260c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	9b02      	ldr	r3, [sp, #8]
 8002612:	b923      	cbnz	r3, 800261e <_dtoa_r+0x7e>
 8002614:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002618:	2800      	cmp	r0, #0
 800261a:	f000 8545 	beq.w	80030a8 <_dtoa_r+0xb08>
 800261e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002620:	b953      	cbnz	r3, 8002638 <_dtoa_r+0x98>
 8002622:	4ba6      	ldr	r3, [pc, #664]	; (80028bc <_dtoa_r+0x31c>)
 8002624:	e021      	b.n	800266a <_dtoa_r+0xca>
 8002626:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <_dtoa_r+0x320>)
 8002628:	9306      	str	r3, [sp, #24]
 800262a:	3308      	adds	r3, #8
 800262c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	9806      	ldr	r0, [sp, #24]
 8002632:	b015      	add	sp, #84	; 0x54
 8002634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002638:	4ba0      	ldr	r3, [pc, #640]	; (80028bc <_dtoa_r+0x31c>)
 800263a:	9306      	str	r3, [sp, #24]
 800263c:	3303      	adds	r3, #3
 800263e:	e7f5      	b.n	800262c <_dtoa_r+0x8c>
 8002640:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	2300      	movs	r3, #0
 8002648:	4630      	mov	r0, r6
 800264a:	4639      	mov	r1, r7
 800264c:	f7fe f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8002650:	4682      	mov	sl, r0
 8002652:	b160      	cbz	r0, 800266e <_dtoa_r+0xce>
 8002654:	2301      	movs	r3, #1
 8002656:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8520 	beq.w	80030a2 <_dtoa_r+0xb02>
 8002662:	4b98      	ldr	r3, [pc, #608]	; (80028c4 <_dtoa_r+0x324>)
 8002664:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	3b01      	subs	r3, #1
 800266a:	9306      	str	r3, [sp, #24]
 800266c:	e7e0      	b.n	8002630 <_dtoa_r+0x90>
 800266e:	ab12      	add	r3, sp, #72	; 0x48
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	ab13      	add	r3, sp, #76	; 0x4c
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4632      	mov	r2, r6
 8002678:	463b      	mov	r3, r7
 800267a:	4620      	mov	r0, r4
 800267c:	f000 fff2 	bl	8003664 <__d2b>
 8002680:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002684:	4683      	mov	fp, r0
 8002686:	2d00      	cmp	r5, #0
 8002688:	d07d      	beq.n	8002786 <_dtoa_r+0x1e6>
 800268a:	46b0      	mov	r8, r6
 800268c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002690:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002694:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002698:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800269c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80026a0:	2200      	movs	r2, #0
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <_dtoa_r+0x328>)
 80026a4:	4640      	mov	r0, r8
 80026a6:	4649      	mov	r1, r9
 80026a8:	f7fd fd5e 	bl	8000168 <__aeabi_dsub>
 80026ac:	a37c      	add	r3, pc, #496	; (adr r3, 80028a0 <_dtoa_r+0x300>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ff11 	bl	80004d8 <__aeabi_dmul>
 80026b6:	a37c      	add	r3, pc, #496	; (adr r3, 80028a8 <_dtoa_r+0x308>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd fd56 	bl	800016c <__adddf3>
 80026c0:	4606      	mov	r6, r0
 80026c2:	4628      	mov	r0, r5
 80026c4:	460f      	mov	r7, r1
 80026c6:	f7fd fe9d 	bl	8000404 <__aeabi_i2d>
 80026ca:	a379      	add	r3, pc, #484	; (adr r3, 80028b0 <_dtoa_r+0x310>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fd ff02 	bl	80004d8 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4630      	mov	r0, r6
 80026da:	4639      	mov	r1, r7
 80026dc:	f7fd fd46 	bl	800016c <__adddf3>
 80026e0:	4606      	mov	r6, r0
 80026e2:	460f      	mov	r7, r1
 80026e4:	f7fe f9a8 	bl	8000a38 <__aeabi_d2iz>
 80026e8:	2200      	movs	r2, #0
 80026ea:	4682      	mov	sl, r0
 80026ec:	2300      	movs	r3, #0
 80026ee:	4630      	mov	r0, r6
 80026f0:	4639      	mov	r1, r7
 80026f2:	f7fe f963 	bl	80009bc <__aeabi_dcmplt>
 80026f6:	b148      	cbz	r0, 800270c <_dtoa_r+0x16c>
 80026f8:	4650      	mov	r0, sl
 80026fa:	f7fd fe83 	bl	8000404 <__aeabi_i2d>
 80026fe:	4632      	mov	r2, r6
 8002700:	463b      	mov	r3, r7
 8002702:	f7fe f951 	bl	80009a8 <__aeabi_dcmpeq>
 8002706:	b908      	cbnz	r0, 800270c <_dtoa_r+0x16c>
 8002708:	f10a 3aff 	add.w	sl, sl, #4294967295
 800270c:	f1ba 0f16 	cmp.w	sl, #22
 8002710:	d85a      	bhi.n	80027c8 <_dtoa_r+0x228>
 8002712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002716:	496d      	ldr	r1, [pc, #436]	; (80028cc <_dtoa_r+0x32c>)
 8002718:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800271c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002720:	f7fe f96a 	bl	80009f8 <__aeabi_dcmpgt>
 8002724:	2800      	cmp	r0, #0
 8002726:	d051      	beq.n	80027cc <_dtoa_r+0x22c>
 8002728:	2300      	movs	r3, #0
 800272a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800272e:	930d      	str	r3, [sp, #52]	; 0x34
 8002730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002732:	1b5d      	subs	r5, r3, r5
 8002734:	1e6b      	subs	r3, r5, #1
 8002736:	9307      	str	r3, [sp, #28]
 8002738:	bf43      	ittte	mi
 800273a:	2300      	movmi	r3, #0
 800273c:	f1c5 0901 	rsbmi	r9, r5, #1
 8002740:	9307      	strmi	r3, [sp, #28]
 8002742:	f04f 0900 	movpl.w	r9, #0
 8002746:	f1ba 0f00 	cmp.w	sl, #0
 800274a:	db41      	blt.n	80027d0 <_dtoa_r+0x230>
 800274c:	9b07      	ldr	r3, [sp, #28]
 800274e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002752:	4453      	add	r3, sl
 8002754:	9307      	str	r3, [sp, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	9308      	str	r3, [sp, #32]
 800275a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800275c:	2b09      	cmp	r3, #9
 800275e:	f200 808f 	bhi.w	8002880 <_dtoa_r+0x2e0>
 8002762:	2b05      	cmp	r3, #5
 8002764:	bfc4      	itt	gt
 8002766:	3b04      	subgt	r3, #4
 8002768:	931e      	strgt	r3, [sp, #120]	; 0x78
 800276a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800276c:	bfc8      	it	gt
 800276e:	2500      	movgt	r5, #0
 8002770:	f1a3 0302 	sub.w	r3, r3, #2
 8002774:	bfd8      	it	le
 8002776:	2501      	movle	r5, #1
 8002778:	2b03      	cmp	r3, #3
 800277a:	f200 808d 	bhi.w	8002898 <_dtoa_r+0x2f8>
 800277e:	e8df f003 	tbb	[pc, r3]
 8002782:	7d7b      	.short	0x7d7b
 8002784:	6f2f      	.short	0x6f2f
 8002786:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800278a:	441d      	add	r5, r3
 800278c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002790:	2820      	cmp	r0, #32
 8002792:	dd13      	ble.n	80027bc <_dtoa_r+0x21c>
 8002794:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002798:	9b02      	ldr	r3, [sp, #8]
 800279a:	fa08 f800 	lsl.w	r8, r8, r0
 800279e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80027a2:	fa23 f000 	lsr.w	r0, r3, r0
 80027a6:	ea48 0000 	orr.w	r0, r8, r0
 80027aa:	f7fd fe1b 	bl	80003e4 <__aeabi_ui2d>
 80027ae:	2301      	movs	r3, #1
 80027b0:	4680      	mov	r8, r0
 80027b2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80027b6:	3d01      	subs	r5, #1
 80027b8:	9310      	str	r3, [sp, #64]	; 0x40
 80027ba:	e771      	b.n	80026a0 <_dtoa_r+0x100>
 80027bc:	9b02      	ldr	r3, [sp, #8]
 80027be:	f1c0 0020 	rsb	r0, r0, #32
 80027c2:	fa03 f000 	lsl.w	r0, r3, r0
 80027c6:	e7f0      	b.n	80027aa <_dtoa_r+0x20a>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e7b0      	b.n	800272e <_dtoa_r+0x18e>
 80027cc:	900d      	str	r0, [sp, #52]	; 0x34
 80027ce:	e7af      	b.n	8002730 <_dtoa_r+0x190>
 80027d0:	f1ca 0300 	rsb	r3, sl, #0
 80027d4:	9308      	str	r3, [sp, #32]
 80027d6:	2300      	movs	r3, #0
 80027d8:	eba9 090a 	sub.w	r9, r9, sl
 80027dc:	930c      	str	r3, [sp, #48]	; 0x30
 80027de:	e7bc      	b.n	800275a <_dtoa_r+0x1ba>
 80027e0:	2301      	movs	r3, #1
 80027e2:	9309      	str	r3, [sp, #36]	; 0x24
 80027e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	dd74      	ble.n	80028d4 <_dtoa_r+0x334>
 80027ea:	4698      	mov	r8, r3
 80027ec:	9304      	str	r3, [sp, #16]
 80027ee:	2200      	movs	r2, #0
 80027f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80027f2:	6072      	str	r2, [r6, #4]
 80027f4:	2204      	movs	r2, #4
 80027f6:	f102 0014 	add.w	r0, r2, #20
 80027fa:	4298      	cmp	r0, r3
 80027fc:	6871      	ldr	r1, [r6, #4]
 80027fe:	d96e      	bls.n	80028de <_dtoa_r+0x33e>
 8002800:	4620      	mov	r0, r4
 8002802:	f000 fca2 	bl	800314a <_Balloc>
 8002806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002808:	6030      	str	r0, [r6, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b8 0f0e 	cmp.w	r8, #14
 8002810:	9306      	str	r3, [sp, #24]
 8002812:	f200 80ed 	bhi.w	80029f0 <_dtoa_r+0x450>
 8002816:	2d00      	cmp	r5, #0
 8002818:	f000 80ea 	beq.w	80029f0 <_dtoa_r+0x450>
 800281c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002820:	f1ba 0f00 	cmp.w	sl, #0
 8002824:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002828:	dd77      	ble.n	800291a <_dtoa_r+0x37a>
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <_dtoa_r+0x32c>)
 800282c:	f00a 030f 	and.w	r3, sl, #15
 8002830:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002834:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002838:	06f0      	lsls	r0, r6, #27
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002842:	d568      	bpl.n	8002916 <_dtoa_r+0x376>
 8002844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <_dtoa_r+0x330>)
 800284a:	2503      	movs	r5, #3
 800284c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002850:	f7fd ff6c 	bl	800072c <__aeabi_ddiv>
 8002854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002858:	f006 060f 	and.w	r6, r6, #15
 800285c:	4f1c      	ldr	r7, [pc, #112]	; (80028d0 <_dtoa_r+0x330>)
 800285e:	e04f      	b.n	8002900 <_dtoa_r+0x360>
 8002860:	2301      	movs	r3, #1
 8002862:	9309      	str	r3, [sp, #36]	; 0x24
 8002864:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002866:	4453      	add	r3, sl
 8002868:	f103 0801 	add.w	r8, r3, #1
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	4643      	mov	r3, r8
 8002870:	2b01      	cmp	r3, #1
 8002872:	bfb8      	it	lt
 8002874:	2301      	movlt	r3, #1
 8002876:	e7ba      	b.n	80027ee <_dtoa_r+0x24e>
 8002878:	2300      	movs	r3, #0
 800287a:	e7b2      	b.n	80027e2 <_dtoa_r+0x242>
 800287c:	2300      	movs	r3, #0
 800287e:	e7f0      	b.n	8002862 <_dtoa_r+0x2c2>
 8002880:	2501      	movs	r5, #1
 8002882:	2300      	movs	r3, #0
 8002884:	9509      	str	r5, [sp, #36]	; 0x24
 8002886:	931e      	str	r3, [sp, #120]	; 0x78
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	2200      	movs	r2, #0
 800288e:	9304      	str	r3, [sp, #16]
 8002890:	4698      	mov	r8, r3
 8002892:	2312      	movs	r3, #18
 8002894:	921f      	str	r2, [sp, #124]	; 0x7c
 8002896:	e7aa      	b.n	80027ee <_dtoa_r+0x24e>
 8002898:	2301      	movs	r3, #1
 800289a:	9309      	str	r3, [sp, #36]	; 0x24
 800289c:	e7f4      	b.n	8002888 <_dtoa_r+0x2e8>
 800289e:	bf00      	nop
 80028a0:	636f4361 	.word	0x636f4361
 80028a4:	3fd287a7 	.word	0x3fd287a7
 80028a8:	8b60c8b3 	.word	0x8b60c8b3
 80028ac:	3fc68a28 	.word	0x3fc68a28
 80028b0:	509f79fb 	.word	0x509f79fb
 80028b4:	3fd34413 	.word	0x3fd34413
 80028b8:	7ff00000 	.word	0x7ff00000
 80028bc:	0800388f 	.word	0x0800388f
 80028c0:	08003886 	.word	0x08003886
 80028c4:	08003885 	.word	0x08003885
 80028c8:	3ff80000 	.word	0x3ff80000
 80028cc:	080038c0 	.word	0x080038c0
 80028d0:	08003898 	.word	0x08003898
 80028d4:	2301      	movs	r3, #1
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	4698      	mov	r8, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	e7da      	b.n	8002894 <_dtoa_r+0x2f4>
 80028de:	3101      	adds	r1, #1
 80028e0:	6071      	str	r1, [r6, #4]
 80028e2:	0052      	lsls	r2, r2, #1
 80028e4:	e787      	b.n	80027f6 <_dtoa_r+0x256>
 80028e6:	07f1      	lsls	r1, r6, #31
 80028e8:	d508      	bpl.n	80028fc <_dtoa_r+0x35c>
 80028ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80028ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f2:	f7fd fdf1 	bl	80004d8 <__aeabi_dmul>
 80028f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80028fa:	3501      	adds	r5, #1
 80028fc:	1076      	asrs	r6, r6, #1
 80028fe:	3708      	adds	r7, #8
 8002900:	2e00      	cmp	r6, #0
 8002902:	d1f0      	bne.n	80028e6 <_dtoa_r+0x346>
 8002904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800290c:	f7fd ff0e 	bl	800072c <__aeabi_ddiv>
 8002910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002914:	e01b      	b.n	800294e <_dtoa_r+0x3ae>
 8002916:	2502      	movs	r5, #2
 8002918:	e7a0      	b.n	800285c <_dtoa_r+0x2bc>
 800291a:	f000 80a4 	beq.w	8002a66 <_dtoa_r+0x4c6>
 800291e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002922:	f1ca 0600 	rsb	r6, sl, #0
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <_dtoa_r+0x608>)
 8002928:	f006 020f 	and.w	r2, r6, #15
 800292c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fdd0 	bl	80004d8 <__aeabi_dmul>
 8002938:	2502      	movs	r5, #2
 800293a:	2300      	movs	r3, #0
 800293c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002940:	4f9a      	ldr	r7, [pc, #616]	; (8002bac <_dtoa_r+0x60c>)
 8002942:	1136      	asrs	r6, r6, #4
 8002944:	2e00      	cmp	r6, #0
 8002946:	f040 8083 	bne.w	8002a50 <_dtoa_r+0x4b0>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e0      	bne.n	8002910 <_dtoa_r+0x370>
 800294e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 808a 	beq.w	8002a6a <_dtoa_r+0x4ca>
 8002956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800295a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800295e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	4b92      	ldr	r3, [pc, #584]	; (8002bb0 <_dtoa_r+0x610>)
 8002966:	f7fe f829 	bl	80009bc <__aeabi_dcmplt>
 800296a:	2800      	cmp	r0, #0
 800296c:	d07d      	beq.n	8002a6a <_dtoa_r+0x4ca>
 800296e:	f1b8 0f00 	cmp.w	r8, #0
 8002972:	d07a      	beq.n	8002a6a <_dtoa_r+0x4ca>
 8002974:	9b04      	ldr	r3, [sp, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	dd36      	ble.n	80029e8 <_dtoa_r+0x448>
 800297a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800297e:	2200      	movs	r2, #0
 8002980:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <_dtoa_r+0x614>)
 8002982:	f7fd fda9 	bl	80004d8 <__aeabi_dmul>
 8002986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800298a:	9e04      	ldr	r6, [sp, #16]
 800298c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002990:	3501      	adds	r5, #1
 8002992:	4628      	mov	r0, r5
 8002994:	f7fd fd36 	bl	8000404 <__aeabi_i2d>
 8002998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800299c:	f7fd fd9c 	bl	80004d8 <__aeabi_dmul>
 80029a0:	2200      	movs	r2, #0
 80029a2:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <_dtoa_r+0x618>)
 80029a4:	f7fd fbe2 	bl	800016c <__adddf3>
 80029a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80029ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80029b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80029b2:	2e00      	cmp	r6, #0
 80029b4:	d15c      	bne.n	8002a70 <_dtoa_r+0x4d0>
 80029b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	4b7f      	ldr	r3, [pc, #508]	; (8002bbc <_dtoa_r+0x61c>)
 80029be:	f7fd fbd3 	bl	8000168 <__aeabi_dsub>
 80029c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029c4:	462b      	mov	r3, r5
 80029c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029ca:	f7fe f815 	bl	80009f8 <__aeabi_dcmpgt>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	f040 8281 	bne.w	8002ed6 <_dtoa_r+0x936>
 80029d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80029de:	f7fd ffed 	bl	80009bc <__aeabi_dcmplt>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	f040 8275 	bne.w	8002ed2 <_dtoa_r+0x932>
 80029e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80029ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f2c0 814b 	blt.w	8002c8e <_dtoa_r+0x6ee>
 80029f8:	f1ba 0f0e 	cmp.w	sl, #14
 80029fc:	f300 8147 	bgt.w	8002c8e <_dtoa_r+0x6ee>
 8002a00:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <_dtoa_r+0x608>)
 8002a02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f280 80d7 	bge.w	8002bc4 <_dtoa_r+0x624>
 8002a16:	f1b8 0f00 	cmp.w	r8, #0
 8002a1a:	f300 80d3 	bgt.w	8002bc4 <_dtoa_r+0x624>
 8002a1e:	f040 8257 	bne.w	8002ed0 <_dtoa_r+0x930>
 8002a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002a26:	2200      	movs	r2, #0
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <_dtoa_r+0x61c>)
 8002a2a:	f7fd fd55 	bl	80004d8 <__aeabi_dmul>
 8002a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a32:	f7fd ffd7 	bl	80009e4 <__aeabi_dcmpge>
 8002a36:	4646      	mov	r6, r8
 8002a38:	4647      	mov	r7, r8
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	f040 822d 	bne.w	8002e9a <_dtoa_r+0x8fa>
 8002a40:	9b06      	ldr	r3, [sp, #24]
 8002a42:	9a06      	ldr	r2, [sp, #24]
 8002a44:	1c5d      	adds	r5, r3, #1
 8002a46:	2331      	movs	r3, #49	; 0x31
 8002a48:	f10a 0a01 	add.w	sl, sl, #1
 8002a4c:	7013      	strb	r3, [r2, #0]
 8002a4e:	e228      	b.n	8002ea2 <_dtoa_r+0x902>
 8002a50:	07f2      	lsls	r2, r6, #31
 8002a52:	d505      	bpl.n	8002a60 <_dtoa_r+0x4c0>
 8002a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a58:	f7fd fd3e 	bl	80004d8 <__aeabi_dmul>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	3501      	adds	r5, #1
 8002a60:	1076      	asrs	r6, r6, #1
 8002a62:	3708      	adds	r7, #8
 8002a64:	e76e      	b.n	8002944 <_dtoa_r+0x3a4>
 8002a66:	2502      	movs	r5, #2
 8002a68:	e771      	b.n	800294e <_dtoa_r+0x3ae>
 8002a6a:	4657      	mov	r7, sl
 8002a6c:	4646      	mov	r6, r8
 8002a6e:	e790      	b.n	8002992 <_dtoa_r+0x3f2>
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <_dtoa_r+0x608>)
 8002a72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002a76:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d048      	beq.n	8002b12 <_dtoa_r+0x572>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	2000      	movs	r0, #0
 8002a86:	494e      	ldr	r1, [pc, #312]	; (8002bc0 <_dtoa_r+0x620>)
 8002a88:	f7fd fe50 	bl	800072c <__aeabi_ddiv>
 8002a8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a90:	f7fd fb6a 	bl	8000168 <__aeabi_dsub>
 8002a94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a98:	9d06      	ldr	r5, [sp, #24]
 8002a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a9e:	f7fd ffcb 	bl	8000a38 <__aeabi_d2iz>
 8002aa2:	9011      	str	r0, [sp, #68]	; 0x44
 8002aa4:	f7fd fcae 	bl	8000404 <__aeabi_i2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ab0:	f7fd fb5a 	bl	8000168 <__aeabi_dsub>
 8002ab4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002aba:	3330      	adds	r3, #48	; 0x30
 8002abc:	f805 3b01 	strb.w	r3, [r5], #1
 8002ac0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ac4:	f7fd ff7a 	bl	80009bc <__aeabi_dcmplt>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d163      	bne.n	8002b94 <_dtoa_r+0x5f4>
 8002acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	4937      	ldr	r1, [pc, #220]	; (8002bb0 <_dtoa_r+0x610>)
 8002ad4:	f7fd fb48 	bl	8000168 <__aeabi_dsub>
 8002ad8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002adc:	f7fd ff6e 	bl	80009bc <__aeabi_dcmplt>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f040 80b5 	bne.w	8002c50 <_dtoa_r+0x6b0>
 8002ae6:	9b06      	ldr	r3, [sp, #24]
 8002ae8:	1aeb      	subs	r3, r5, r3
 8002aea:	429e      	cmp	r6, r3
 8002aec:	f77f af7c 	ble.w	80029e8 <_dtoa_r+0x448>
 8002af0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002af4:	2200      	movs	r2, #0
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <_dtoa_r+0x614>)
 8002af8:	f7fd fcee 	bl	80004d8 <__aeabi_dmul>
 8002afc:	2200      	movs	r2, #0
 8002afe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <_dtoa_r+0x614>)
 8002b08:	f7fd fce6 	bl	80004d8 <__aeabi_dmul>
 8002b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b10:	e7c3      	b.n	8002a9a <_dtoa_r+0x4fa>
 8002b12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b16:	f7fd fcdf 	bl	80004d8 <__aeabi_dmul>
 8002b1a:	9b06      	ldr	r3, [sp, #24]
 8002b1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b20:	199d      	adds	r5, r3, r6
 8002b22:	461e      	mov	r6, r3
 8002b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b28:	f7fd ff86 	bl	8000a38 <__aeabi_d2iz>
 8002b2c:	9011      	str	r0, [sp, #68]	; 0x44
 8002b2e:	f7fd fc69 	bl	8000404 <__aeabi_i2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b3a:	f7fd fb15 	bl	8000168 <__aeabi_dsub>
 8002b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b44:	3330      	adds	r3, #48	; 0x30
 8002b46:	f806 3b01 	strb.w	r3, [r6], #1
 8002b4a:	42ae      	cmp	r6, r5
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	d124      	bne.n	8002b9c <_dtoa_r+0x5fc>
 8002b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <_dtoa_r+0x620>)
 8002b58:	f7fd fb08 	bl	800016c <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b64:	f7fd ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d171      	bne.n	8002c50 <_dtoa_r+0x6b0>
 8002b6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b70:	2000      	movs	r0, #0
 8002b72:	4913      	ldr	r1, [pc, #76]	; (8002bc0 <_dtoa_r+0x620>)
 8002b74:	f7fd faf8 	bl	8000168 <__aeabi_dsub>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b80:	f7fd ff1c 	bl	80009bc <__aeabi_dcmplt>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	f43f af2f 	beq.w	80029e8 <_dtoa_r+0x448>
 8002b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002b8e:	1e6a      	subs	r2, r5, #1
 8002b90:	2b30      	cmp	r3, #48	; 0x30
 8002b92:	d001      	beq.n	8002b98 <_dtoa_r+0x5f8>
 8002b94:	46ba      	mov	sl, r7
 8002b96:	e04a      	b.n	8002c2e <_dtoa_r+0x68e>
 8002b98:	4615      	mov	r5, r2
 8002b9a:	e7f6      	b.n	8002b8a <_dtoa_r+0x5ea>
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_dtoa_r+0x614>)
 8002b9e:	f7fd fc9b 	bl	80004d8 <__aeabi_dmul>
 8002ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ba6:	e7bd      	b.n	8002b24 <_dtoa_r+0x584>
 8002ba8:	080038c0 	.word	0x080038c0
 8002bac:	08003898 	.word	0x08003898
 8002bb0:	3ff00000 	.word	0x3ff00000
 8002bb4:	40240000 	.word	0x40240000
 8002bb8:	401c0000 	.word	0x401c0000
 8002bbc:	40140000 	.word	0x40140000
 8002bc0:	3fe00000 	.word	0x3fe00000
 8002bc4:	9d06      	ldr	r5, [sp, #24]
 8002bc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bce:	4630      	mov	r0, r6
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	f7fd fdab 	bl	800072c <__aeabi_ddiv>
 8002bd6:	f7fd ff2f 	bl	8000a38 <__aeabi_d2iz>
 8002bda:	4681      	mov	r9, r0
 8002bdc:	f7fd fc12 	bl	8000404 <__aeabi_i2d>
 8002be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002be4:	f7fd fc78 	bl	80004d8 <__aeabi_dmul>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4630      	mov	r0, r6
 8002bee:	4639      	mov	r1, r7
 8002bf0:	f7fd faba 	bl	8000168 <__aeabi_dsub>
 8002bf4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8002bfc:	9e06      	ldr	r6, [sp, #24]
 8002bfe:	4602      	mov	r2, r0
 8002c00:	1bae      	subs	r6, r5, r6
 8002c02:	45b0      	cmp	r8, r6
 8002c04:	460b      	mov	r3, r1
 8002c06:	d135      	bne.n	8002c74 <_dtoa_r+0x6d4>
 8002c08:	f7fd fab0 	bl	800016c <__adddf3>
 8002c0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c10:	4606      	mov	r6, r0
 8002c12:	460f      	mov	r7, r1
 8002c14:	f7fd fef0 	bl	80009f8 <__aeabi_dcmpgt>
 8002c18:	b9c8      	cbnz	r0, 8002c4e <_dtoa_r+0x6ae>
 8002c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c1e:	4630      	mov	r0, r6
 8002c20:	4639      	mov	r1, r7
 8002c22:	f7fd fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8002c26:	b110      	cbz	r0, 8002c2e <_dtoa_r+0x68e>
 8002c28:	f019 0f01 	tst.w	r9, #1
 8002c2c:	d10f      	bne.n	8002c4e <_dtoa_r+0x6ae>
 8002c2e:	4659      	mov	r1, fp
 8002c30:	4620      	mov	r0, r4
 8002c32:	f000 fabe 	bl	80031b2 <_Bfree>
 8002c36:	2300      	movs	r3, #0
 8002c38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002c3a:	702b      	strb	r3, [r5, #0]
 8002c3c:	f10a 0301 	add.w	r3, sl, #1
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f43f acf3 	beq.w	8002630 <_dtoa_r+0x90>
 8002c4a:	601d      	str	r5, [r3, #0]
 8002c4c:	e4f0      	b.n	8002630 <_dtoa_r+0x90>
 8002c4e:	4657      	mov	r7, sl
 8002c50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002c54:	1e6b      	subs	r3, r5, #1
 8002c56:	2a39      	cmp	r2, #57	; 0x39
 8002c58:	d106      	bne.n	8002c68 <_dtoa_r+0x6c8>
 8002c5a:	9a06      	ldr	r2, [sp, #24]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <_dtoa_r+0x6d0>
 8002c60:	2330      	movs	r3, #48	; 0x30
 8002c62:	7013      	strb	r3, [r2, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	3701      	adds	r7, #1
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	3201      	adds	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e791      	b.n	8002b94 <_dtoa_r+0x5f4>
 8002c70:	461d      	mov	r5, r3
 8002c72:	e7ed      	b.n	8002c50 <_dtoa_r+0x6b0>
 8002c74:	2200      	movs	r2, #0
 8002c76:	4b99      	ldr	r3, [pc, #612]	; (8002edc <_dtoa_r+0x93c>)
 8002c78:	f7fd fc2e 	bl	80004d8 <__aeabi_dmul>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2300      	movs	r3, #0
 8002c80:	4606      	mov	r6, r0
 8002c82:	460f      	mov	r7, r1
 8002c84:	f7fd fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d09e      	beq.n	8002bca <_dtoa_r+0x62a>
 8002c8c:	e7cf      	b.n	8002c2e <_dtoa_r+0x68e>
 8002c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	f000 8088 	beq.w	8002da6 <_dtoa_r+0x806>
 8002c96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002c98:	2a01      	cmp	r2, #1
 8002c9a:	dc6d      	bgt.n	8002d78 <_dtoa_r+0x7d8>
 8002c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d066      	beq.n	8002d70 <_dtoa_r+0x7d0>
 8002ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002ca6:	464d      	mov	r5, r9
 8002ca8:	9e08      	ldr	r6, [sp, #32]
 8002caa:	9a07      	ldr	r2, [sp, #28]
 8002cac:	2101      	movs	r1, #1
 8002cae:	441a      	add	r2, r3
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4499      	add	r9, r3
 8002cb4:	9207      	str	r2, [sp, #28]
 8002cb6:	f000 fb1c 	bl	80032f2 <__i2b>
 8002cba:	4607      	mov	r7, r0
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	dd0b      	ble.n	8002cd8 <_dtoa_r+0x738>
 8002cc0:	9b07      	ldr	r3, [sp, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dd08      	ble.n	8002cd8 <_dtoa_r+0x738>
 8002cc6:	42ab      	cmp	r3, r5
 8002cc8:	bfa8      	it	ge
 8002cca:	462b      	movge	r3, r5
 8002ccc:	9a07      	ldr	r2, [sp, #28]
 8002cce:	eba9 0903 	sub.w	r9, r9, r3
 8002cd2:	1aed      	subs	r5, r5, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	9307      	str	r3, [sp, #28]
 8002cd8:	9b08      	ldr	r3, [sp, #32]
 8002cda:	b1eb      	cbz	r3, 8002d18 <_dtoa_r+0x778>
 8002cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d065      	beq.n	8002dae <_dtoa_r+0x80e>
 8002ce2:	b18e      	cbz	r6, 8002d08 <_dtoa_r+0x768>
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f000 fba1 	bl	8003430 <__pow5mult>
 8002cee:	465a      	mov	r2, fp
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4607      	mov	r7, r0
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f000 fb05 	bl	8003304 <__multiply>
 8002cfa:	4659      	mov	r1, fp
 8002cfc:	900a      	str	r0, [sp, #40]	; 0x28
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f000 fa57 	bl	80031b2 <_Bfree>
 8002d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d06:	469b      	mov	fp, r3
 8002d08:	9b08      	ldr	r3, [sp, #32]
 8002d0a:	1b9a      	subs	r2, r3, r6
 8002d0c:	d004      	beq.n	8002d18 <_dtoa_r+0x778>
 8002d0e:	4659      	mov	r1, fp
 8002d10:	4620      	mov	r0, r4
 8002d12:	f000 fb8d 	bl	8003430 <__pow5mult>
 8002d16:	4683      	mov	fp, r0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 fae9 	bl	80032f2 <__i2b>
 8002d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d22:	4606      	mov	r6, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 81c6 	beq.w	80030b6 <_dtoa_r+0xb16>
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 fb7e 	bl	8003430 <__pow5mult>
 8002d34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d36:	4606      	mov	r6, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	dc3e      	bgt.n	8002dba <_dtoa_r+0x81a>
 8002d3c:	9b02      	ldr	r3, [sp, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d137      	bne.n	8002db2 <_dtoa_r+0x812>
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d134      	bne.n	8002db6 <_dtoa_r+0x816>
 8002d4c:	9b03      	ldr	r3, [sp, #12]
 8002d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d52:	0d1b      	lsrs	r3, r3, #20
 8002d54:	051b      	lsls	r3, r3, #20
 8002d56:	b12b      	cbz	r3, 8002d64 <_dtoa_r+0x7c4>
 8002d58:	9b07      	ldr	r3, [sp, #28]
 8002d5a:	f109 0901 	add.w	r9, r9, #1
 8002d5e:	3301      	adds	r3, #1
 8002d60:	9307      	str	r3, [sp, #28]
 8002d62:	2301      	movs	r3, #1
 8002d64:	9308      	str	r3, [sp, #32]
 8002d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d128      	bne.n	8002dbe <_dtoa_r+0x81e>
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e02e      	b.n	8002dce <_dtoa_r+0x82e>
 8002d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002d72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002d76:	e796      	b.n	8002ca6 <_dtoa_r+0x706>
 8002d78:	9b08      	ldr	r3, [sp, #32]
 8002d7a:	f108 36ff 	add.w	r6, r8, #4294967295
 8002d7e:	42b3      	cmp	r3, r6
 8002d80:	bfb7      	itett	lt
 8002d82:	9b08      	ldrlt	r3, [sp, #32]
 8002d84:	1b9e      	subge	r6, r3, r6
 8002d86:	1af2      	sublt	r2, r6, r3
 8002d88:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8002d8a:	bfbf      	itttt	lt
 8002d8c:	9608      	strlt	r6, [sp, #32]
 8002d8e:	189b      	addlt	r3, r3, r2
 8002d90:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002d92:	2600      	movlt	r6, #0
 8002d94:	f1b8 0f00 	cmp.w	r8, #0
 8002d98:	bfb9      	ittee	lt
 8002d9a:	eba9 0508 	sublt.w	r5, r9, r8
 8002d9e:	2300      	movlt	r3, #0
 8002da0:	464d      	movge	r5, r9
 8002da2:	4643      	movge	r3, r8
 8002da4:	e781      	b.n	8002caa <_dtoa_r+0x70a>
 8002da6:	9e08      	ldr	r6, [sp, #32]
 8002da8:	464d      	mov	r5, r9
 8002daa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002dac:	e786      	b.n	8002cbc <_dtoa_r+0x71c>
 8002dae:	9a08      	ldr	r2, [sp, #32]
 8002db0:	e7ad      	b.n	8002d0e <_dtoa_r+0x76e>
 8002db2:	2300      	movs	r3, #0
 8002db4:	e7d6      	b.n	8002d64 <_dtoa_r+0x7c4>
 8002db6:	9b02      	ldr	r3, [sp, #8]
 8002db8:	e7d4      	b.n	8002d64 <_dtoa_r+0x7c4>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9308      	str	r3, [sp, #32]
 8002dbe:	6933      	ldr	r3, [r6, #16]
 8002dc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002dc4:	6918      	ldr	r0, [r3, #16]
 8002dc6:	f000 fa46 	bl	8003256 <__hi0bits>
 8002dca:	f1c0 0020 	rsb	r0, r0, #32
 8002dce:	9b07      	ldr	r3, [sp, #28]
 8002dd0:	4418      	add	r0, r3
 8002dd2:	f010 001f 	ands.w	r0, r0, #31
 8002dd6:	d047      	beq.n	8002e68 <_dtoa_r+0x8c8>
 8002dd8:	f1c0 0320 	rsb	r3, r0, #32
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	dd3b      	ble.n	8002e58 <_dtoa_r+0x8b8>
 8002de0:	9b07      	ldr	r3, [sp, #28]
 8002de2:	f1c0 001c 	rsb	r0, r0, #28
 8002de6:	4481      	add	r9, r0
 8002de8:	4405      	add	r5, r0
 8002dea:	4403      	add	r3, r0
 8002dec:	9307      	str	r3, [sp, #28]
 8002dee:	f1b9 0f00 	cmp.w	r9, #0
 8002df2:	dd05      	ble.n	8002e00 <_dtoa_r+0x860>
 8002df4:	4659      	mov	r1, fp
 8002df6:	464a      	mov	r2, r9
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f000 fb67 	bl	80034cc <__lshift>
 8002dfe:	4683      	mov	fp, r0
 8002e00:	9b07      	ldr	r3, [sp, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dd05      	ble.n	8002e12 <_dtoa_r+0x872>
 8002e06:	4631      	mov	r1, r6
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f000 fb5e 	bl	80034cc <__lshift>
 8002e10:	4606      	mov	r6, r0
 8002e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e14:	b353      	cbz	r3, 8002e6c <_dtoa_r+0x8cc>
 8002e16:	4631      	mov	r1, r6
 8002e18:	4658      	mov	r0, fp
 8002e1a:	f000 fbab 	bl	8003574 <__mcmp>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	da24      	bge.n	8002e6c <_dtoa_r+0x8cc>
 8002e22:	2300      	movs	r3, #0
 8002e24:	4659      	mov	r1, fp
 8002e26:	220a      	movs	r2, #10
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f000 f9d9 	bl	80031e0 <__multadd>
 8002e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e34:	4683      	mov	fp, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8144 	beq.w	80030c4 <_dtoa_r+0xb24>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	4639      	mov	r1, r7
 8002e40:	220a      	movs	r2, #10
 8002e42:	4620      	mov	r0, r4
 8002e44:	f000 f9cc 	bl	80031e0 <__multadd>
 8002e48:	9b04      	ldr	r3, [sp, #16]
 8002e4a:	4607      	mov	r7, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dc4d      	bgt.n	8002eec <_dtoa_r+0x94c>
 8002e50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	dd4a      	ble.n	8002eec <_dtoa_r+0x94c>
 8002e56:	e011      	b.n	8002e7c <_dtoa_r+0x8dc>
 8002e58:	d0c9      	beq.n	8002dee <_dtoa_r+0x84e>
 8002e5a:	9a07      	ldr	r2, [sp, #28]
 8002e5c:	331c      	adds	r3, #28
 8002e5e:	441a      	add	r2, r3
 8002e60:	4499      	add	r9, r3
 8002e62:	441d      	add	r5, r3
 8002e64:	4613      	mov	r3, r2
 8002e66:	e7c1      	b.n	8002dec <_dtoa_r+0x84c>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	e7f6      	b.n	8002e5a <_dtoa_r+0x8ba>
 8002e6c:	f1b8 0f00 	cmp.w	r8, #0
 8002e70:	dc36      	bgt.n	8002ee0 <_dtoa_r+0x940>
 8002e72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	dd33      	ble.n	8002ee0 <_dtoa_r+0x940>
 8002e78:	f8cd 8010 	str.w	r8, [sp, #16]
 8002e7c:	9b04      	ldr	r3, [sp, #16]
 8002e7e:	b963      	cbnz	r3, 8002e9a <_dtoa_r+0x8fa>
 8002e80:	4631      	mov	r1, r6
 8002e82:	2205      	movs	r2, #5
 8002e84:	4620      	mov	r0, r4
 8002e86:	f000 f9ab 	bl	80031e0 <__multadd>
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	4658      	mov	r0, fp
 8002e90:	f000 fb70 	bl	8003574 <__mcmp>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	f73f add3 	bgt.w	8002a40 <_dtoa_r+0x4a0>
 8002e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e9c:	9d06      	ldr	r5, [sp, #24]
 8002e9e:	ea6f 0a03 	mvn.w	sl, r3
 8002ea2:	f04f 0900 	mov.w	r9, #0
 8002ea6:	4631      	mov	r1, r6
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f000 f982 	bl	80031b2 <_Bfree>
 8002eae:	2f00      	cmp	r7, #0
 8002eb0:	f43f aebd 	beq.w	8002c2e <_dtoa_r+0x68e>
 8002eb4:	f1b9 0f00 	cmp.w	r9, #0
 8002eb8:	d005      	beq.n	8002ec6 <_dtoa_r+0x926>
 8002eba:	45b9      	cmp	r9, r7
 8002ebc:	d003      	beq.n	8002ec6 <_dtoa_r+0x926>
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f000 f976 	bl	80031b2 <_Bfree>
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f972 	bl	80031b2 <_Bfree>
 8002ece:	e6ae      	b.n	8002c2e <_dtoa_r+0x68e>
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	4637      	mov	r7, r6
 8002ed4:	e7e1      	b.n	8002e9a <_dtoa_r+0x8fa>
 8002ed6:	46ba      	mov	sl, r7
 8002ed8:	4637      	mov	r7, r6
 8002eda:	e5b1      	b.n	8002a40 <_dtoa_r+0x4a0>
 8002edc:	40240000 	.word	0x40240000
 8002ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee2:	f8cd 8010 	str.w	r8, [sp, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80f3 	beq.w	80030d2 <_dtoa_r+0xb32>
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	dd05      	ble.n	8002efc <_dtoa_r+0x95c>
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	462a      	mov	r2, r5
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f000 fae9 	bl	80034cc <__lshift>
 8002efa:	4607      	mov	r7, r0
 8002efc:	9b08      	ldr	r3, [sp, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04c      	beq.n	8002f9c <_dtoa_r+0x9fc>
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 f920 	bl	800314a <_Balloc>
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	f107 010c 	add.w	r1, r7, #12
 8002f12:	3202      	adds	r2, #2
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	300c      	adds	r0, #12
 8002f18:	f000 f90c 	bl	8003134 <memcpy>
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 fad3 	bl	80034cc <__lshift>
 8002f26:	46b9      	mov	r9, r7
 8002f28:	4607      	mov	r7, r0
 8002f2a:	9b06      	ldr	r3, [sp, #24]
 8002f2c:	9307      	str	r3, [sp, #28]
 8002f2e:	9b02      	ldr	r3, [sp, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	9308      	str	r3, [sp, #32]
 8002f36:	4631      	mov	r1, r6
 8002f38:	4658      	mov	r0, fp
 8002f3a:	f7ff faa3 	bl	8002484 <quorem>
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4605      	mov	r5, r0
 8002f42:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002f46:	4658      	mov	r0, fp
 8002f48:	f000 fb14 	bl	8003574 <__mcmp>
 8002f4c:	463a      	mov	r2, r7
 8002f4e:	9002      	str	r0, [sp, #8]
 8002f50:	4631      	mov	r1, r6
 8002f52:	4620      	mov	r0, r4
 8002f54:	f000 fb28 	bl	80035a8 <__mdiff>
 8002f58:	68c3      	ldr	r3, [r0, #12]
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	bb03      	cbnz	r3, 8002fa0 <_dtoa_r+0xa00>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	9009      	str	r0, [sp, #36]	; 0x24
 8002f62:	4658      	mov	r0, fp
 8002f64:	f000 fb06 	bl	8003574 <__mcmp>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4620      	mov	r0, r4
 8002f70:	9309      	str	r3, [sp, #36]	; 0x24
 8002f72:	f000 f91e 	bl	80031b2 <_Bfree>
 8002f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f78:	b9a3      	cbnz	r3, 8002fa4 <_dtoa_r+0xa04>
 8002f7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f7c:	b992      	cbnz	r2, 8002fa4 <_dtoa_r+0xa04>
 8002f7e:	9a08      	ldr	r2, [sp, #32]
 8002f80:	b982      	cbnz	r2, 8002fa4 <_dtoa_r+0xa04>
 8002f82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f86:	d029      	beq.n	8002fdc <_dtoa_r+0xa3c>
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd01      	ble.n	8002f92 <_dtoa_r+0x9f2>
 8002f8e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8002f92:	9b07      	ldr	r3, [sp, #28]
 8002f94:	1c5d      	adds	r5, r3, #1
 8002f96:	f883 8000 	strb.w	r8, [r3]
 8002f9a:	e784      	b.n	8002ea6 <_dtoa_r+0x906>
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	e7c2      	b.n	8002f26 <_dtoa_r+0x986>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e7e3      	b.n	8002f6c <_dtoa_r+0x9cc>
 8002fa4:	9a02      	ldr	r2, [sp, #8]
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	db04      	blt.n	8002fb4 <_dtoa_r+0xa14>
 8002faa:	d123      	bne.n	8002ff4 <_dtoa_r+0xa54>
 8002fac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002fae:	bb0a      	cbnz	r2, 8002ff4 <_dtoa_r+0xa54>
 8002fb0:	9a08      	ldr	r2, [sp, #32]
 8002fb2:	b9fa      	cbnz	r2, 8002ff4 <_dtoa_r+0xa54>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	ddec      	ble.n	8002f92 <_dtoa_r+0x9f2>
 8002fb8:	4659      	mov	r1, fp
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 fa85 	bl	80034cc <__lshift>
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4683      	mov	fp, r0
 8002fc6:	f000 fad5 	bl	8003574 <__mcmp>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	dc03      	bgt.n	8002fd6 <_dtoa_r+0xa36>
 8002fce:	d1e0      	bne.n	8002f92 <_dtoa_r+0x9f2>
 8002fd0:	f018 0f01 	tst.w	r8, #1
 8002fd4:	d0dd      	beq.n	8002f92 <_dtoa_r+0x9f2>
 8002fd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002fda:	d1d8      	bne.n	8002f8e <_dtoa_r+0x9ee>
 8002fdc:	9b07      	ldr	r3, [sp, #28]
 8002fde:	9a07      	ldr	r2, [sp, #28]
 8002fe0:	1c5d      	adds	r5, r3, #1
 8002fe2:	2339      	movs	r3, #57	; 0x39
 8002fe4:	7013      	strb	r3, [r2, #0]
 8002fe6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002fea:	1e6a      	subs	r2, r5, #1
 8002fec:	2b39      	cmp	r3, #57	; 0x39
 8002fee:	d04d      	beq.n	800308c <_dtoa_r+0xaec>
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e052      	b.n	800309a <_dtoa_r+0xafa>
 8002ff4:	9a07      	ldr	r2, [sp, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f102 0501 	add.w	r5, r2, #1
 8002ffc:	dd06      	ble.n	800300c <_dtoa_r+0xa6c>
 8002ffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003002:	d0eb      	beq.n	8002fdc <_dtoa_r+0xa3c>
 8003004:	f108 0801 	add.w	r8, r8, #1
 8003008:	9b07      	ldr	r3, [sp, #28]
 800300a:	e7c4      	b.n	8002f96 <_dtoa_r+0x9f6>
 800300c:	9b06      	ldr	r3, [sp, #24]
 800300e:	9a04      	ldr	r2, [sp, #16]
 8003010:	1aeb      	subs	r3, r5, r3
 8003012:	4293      	cmp	r3, r2
 8003014:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003018:	d021      	beq.n	800305e <_dtoa_r+0xabe>
 800301a:	4659      	mov	r1, fp
 800301c:	2300      	movs	r3, #0
 800301e:	220a      	movs	r2, #10
 8003020:	4620      	mov	r0, r4
 8003022:	f000 f8dd 	bl	80031e0 <__multadd>
 8003026:	45b9      	cmp	r9, r7
 8003028:	4683      	mov	fp, r0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f04f 020a 	mov.w	r2, #10
 8003032:	4649      	mov	r1, r9
 8003034:	4620      	mov	r0, r4
 8003036:	d105      	bne.n	8003044 <_dtoa_r+0xaa4>
 8003038:	f000 f8d2 	bl	80031e0 <__multadd>
 800303c:	4681      	mov	r9, r0
 800303e:	4607      	mov	r7, r0
 8003040:	9507      	str	r5, [sp, #28]
 8003042:	e778      	b.n	8002f36 <_dtoa_r+0x996>
 8003044:	f000 f8cc 	bl	80031e0 <__multadd>
 8003048:	4639      	mov	r1, r7
 800304a:	4681      	mov	r9, r0
 800304c:	2300      	movs	r3, #0
 800304e:	220a      	movs	r2, #10
 8003050:	4620      	mov	r0, r4
 8003052:	f000 f8c5 	bl	80031e0 <__multadd>
 8003056:	4607      	mov	r7, r0
 8003058:	e7f2      	b.n	8003040 <_dtoa_r+0xaa0>
 800305a:	f04f 0900 	mov.w	r9, #0
 800305e:	4659      	mov	r1, fp
 8003060:	2201      	movs	r2, #1
 8003062:	4620      	mov	r0, r4
 8003064:	f000 fa32 	bl	80034cc <__lshift>
 8003068:	4631      	mov	r1, r6
 800306a:	4683      	mov	fp, r0
 800306c:	f000 fa82 	bl	8003574 <__mcmp>
 8003070:	2800      	cmp	r0, #0
 8003072:	dcb8      	bgt.n	8002fe6 <_dtoa_r+0xa46>
 8003074:	d102      	bne.n	800307c <_dtoa_r+0xadc>
 8003076:	f018 0f01 	tst.w	r8, #1
 800307a:	d1b4      	bne.n	8002fe6 <_dtoa_r+0xa46>
 800307c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003080:	1e6a      	subs	r2, r5, #1
 8003082:	2b30      	cmp	r3, #48	; 0x30
 8003084:	f47f af0f 	bne.w	8002ea6 <_dtoa_r+0x906>
 8003088:	4615      	mov	r5, r2
 800308a:	e7f7      	b.n	800307c <_dtoa_r+0xadc>
 800308c:	9b06      	ldr	r3, [sp, #24]
 800308e:	4293      	cmp	r3, r2
 8003090:	d105      	bne.n	800309e <_dtoa_r+0xafe>
 8003092:	2331      	movs	r3, #49	; 0x31
 8003094:	9a06      	ldr	r2, [sp, #24]
 8003096:	f10a 0a01 	add.w	sl, sl, #1
 800309a:	7013      	strb	r3, [r2, #0]
 800309c:	e703      	b.n	8002ea6 <_dtoa_r+0x906>
 800309e:	4615      	mov	r5, r2
 80030a0:	e7a1      	b.n	8002fe6 <_dtoa_r+0xa46>
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <_dtoa_r+0xb60>)
 80030a4:	f7ff bae1 	b.w	800266a <_dtoa_r+0xca>
 80030a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f47f aabb 	bne.w	8002626 <_dtoa_r+0x86>
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <_dtoa_r+0xb64>)
 80030b2:	f7ff bada 	b.w	800266a <_dtoa_r+0xca>
 80030b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f77f ae3f 	ble.w	8002d3c <_dtoa_r+0x79c>
 80030be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030c0:	9308      	str	r3, [sp, #32]
 80030c2:	e653      	b.n	8002d6c <_dtoa_r+0x7cc>
 80030c4:	9b04      	ldr	r3, [sp, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc03      	bgt.n	80030d2 <_dtoa_r+0xb32>
 80030ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	f73f aed5 	bgt.w	8002e7c <_dtoa_r+0x8dc>
 80030d2:	9d06      	ldr	r5, [sp, #24]
 80030d4:	4631      	mov	r1, r6
 80030d6:	4658      	mov	r0, fp
 80030d8:	f7ff f9d4 	bl	8002484 <quorem>
 80030dc:	9b06      	ldr	r3, [sp, #24]
 80030de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80030e2:	f805 8b01 	strb.w	r8, [r5], #1
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	1aeb      	subs	r3, r5, r3
 80030ea:	429a      	cmp	r2, r3
 80030ec:	ddb5      	ble.n	800305a <_dtoa_r+0xaba>
 80030ee:	4659      	mov	r1, fp
 80030f0:	2300      	movs	r3, #0
 80030f2:	220a      	movs	r2, #10
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 f873 	bl	80031e0 <__multadd>
 80030fa:	4683      	mov	fp, r0
 80030fc:	e7ea      	b.n	80030d4 <_dtoa_r+0xb34>
 80030fe:	bf00      	nop
 8003100:	08003884 	.word	0x08003884
 8003104:	08003886 	.word	0x08003886

08003108 <_localeconv_r>:
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <_localeconv_r+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a18      	ldr	r0, [r3, #32]
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <_localeconv_r+0x18>)
 8003110:	2800      	cmp	r0, #0
 8003112:	bf08      	it	eq
 8003114:	4618      	moveq	r0, r3
 8003116:	30f0      	adds	r0, #240	; 0xf0
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c
 8003120:	20000070 	.word	0x20000070

08003124 <malloc>:
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <malloc+0xc>)
 8003126:	4601      	mov	r1, r0
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f000 baf9 	b.w	8003720 <_malloc_r>
 800312e:	bf00      	nop
 8003130:	2000000c 	.word	0x2000000c

08003134 <memcpy>:
 8003134:	b510      	push	{r4, lr}
 8003136:	1e43      	subs	r3, r0, #1
 8003138:	440a      	add	r2, r1
 800313a:	4291      	cmp	r1, r2
 800313c:	d100      	bne.n	8003140 <memcpy+0xc>
 800313e:	bd10      	pop	{r4, pc}
 8003140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003148:	e7f7      	b.n	800313a <memcpy+0x6>

0800314a <_Balloc>:
 800314a:	b570      	push	{r4, r5, r6, lr}
 800314c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800314e:	4604      	mov	r4, r0
 8003150:	460e      	mov	r6, r1
 8003152:	b93d      	cbnz	r5, 8003164 <_Balloc+0x1a>
 8003154:	2010      	movs	r0, #16
 8003156:	f7ff ffe5 	bl	8003124 <malloc>
 800315a:	6260      	str	r0, [r4, #36]	; 0x24
 800315c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003160:	6005      	str	r5, [r0, #0]
 8003162:	60c5      	str	r5, [r0, #12]
 8003164:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003166:	68eb      	ldr	r3, [r5, #12]
 8003168:	b183      	cbz	r3, 800318c <_Balloc+0x42>
 800316a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003172:	b9b8      	cbnz	r0, 80031a4 <_Balloc+0x5a>
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f506 	lsl.w	r5, r1, r6
 800317a:	1d6a      	adds	r2, r5, #5
 800317c:	0092      	lsls	r2, r2, #2
 800317e:	4620      	mov	r0, r4
 8003180:	f000 fabf 	bl	8003702 <_calloc_r>
 8003184:	b160      	cbz	r0, 80031a0 <_Balloc+0x56>
 8003186:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800318a:	e00e      	b.n	80031aa <_Balloc+0x60>
 800318c:	2221      	movs	r2, #33	; 0x21
 800318e:	2104      	movs	r1, #4
 8003190:	4620      	mov	r0, r4
 8003192:	f000 fab6 	bl	8003702 <_calloc_r>
 8003196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003198:	60e8      	str	r0, [r5, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e4      	bne.n	800316a <_Balloc+0x20>
 80031a0:	2000      	movs	r0, #0
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
 80031a4:	6802      	ldr	r2, [r0, #0]
 80031a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80031aa:	2300      	movs	r3, #0
 80031ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80031b0:	e7f7      	b.n	80031a2 <_Balloc+0x58>

080031b2 <_Bfree>:
 80031b2:	b570      	push	{r4, r5, r6, lr}
 80031b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80031b6:	4606      	mov	r6, r0
 80031b8:	460d      	mov	r5, r1
 80031ba:	b93c      	cbnz	r4, 80031cc <_Bfree+0x1a>
 80031bc:	2010      	movs	r0, #16
 80031be:	f7ff ffb1 	bl	8003124 <malloc>
 80031c2:	6270      	str	r0, [r6, #36]	; 0x24
 80031c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80031c8:	6004      	str	r4, [r0, #0]
 80031ca:	60c4      	str	r4, [r0, #12]
 80031cc:	b13d      	cbz	r5, 80031de <_Bfree+0x2c>
 80031ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80031d0:	686a      	ldr	r2, [r5, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031d8:	6029      	str	r1, [r5, #0]
 80031da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80031de:	bd70      	pop	{r4, r5, r6, pc}

080031e0 <__multadd>:
 80031e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e4:	461f      	mov	r7, r3
 80031e6:	4606      	mov	r6, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	2300      	movs	r3, #0
 80031ec:	690d      	ldr	r5, [r1, #16]
 80031ee:	f101 0c14 	add.w	ip, r1, #20
 80031f2:	f8dc 0000 	ldr.w	r0, [ip]
 80031f6:	3301      	adds	r3, #1
 80031f8:	b281      	uxth	r1, r0
 80031fa:	fb02 7101 	mla	r1, r2, r1, r7
 80031fe:	0c00      	lsrs	r0, r0, #16
 8003200:	0c0f      	lsrs	r7, r1, #16
 8003202:	fb02 7000 	mla	r0, r2, r0, r7
 8003206:	b289      	uxth	r1, r1
 8003208:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800320c:	429d      	cmp	r5, r3
 800320e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003212:	f84c 1b04 	str.w	r1, [ip], #4
 8003216:	dcec      	bgt.n	80031f2 <__multadd+0x12>
 8003218:	b1d7      	cbz	r7, 8003250 <__multadd+0x70>
 800321a:	68a3      	ldr	r3, [r4, #8]
 800321c:	42ab      	cmp	r3, r5
 800321e:	dc12      	bgt.n	8003246 <__multadd+0x66>
 8003220:	6861      	ldr	r1, [r4, #4]
 8003222:	4630      	mov	r0, r6
 8003224:	3101      	adds	r1, #1
 8003226:	f7ff ff90 	bl	800314a <_Balloc>
 800322a:	4680      	mov	r8, r0
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	f104 010c 	add.w	r1, r4, #12
 8003232:	3202      	adds	r2, #2
 8003234:	0092      	lsls	r2, r2, #2
 8003236:	300c      	adds	r0, #12
 8003238:	f7ff ff7c 	bl	8003134 <memcpy>
 800323c:	4621      	mov	r1, r4
 800323e:	4630      	mov	r0, r6
 8003240:	f7ff ffb7 	bl	80031b2 <_Bfree>
 8003244:	4644      	mov	r4, r8
 8003246:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800324a:	3501      	adds	r5, #1
 800324c:	615f      	str	r7, [r3, #20]
 800324e:	6125      	str	r5, [r4, #16]
 8003250:	4620      	mov	r0, r4
 8003252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003256 <__hi0bits>:
 8003256:	0c02      	lsrs	r2, r0, #16
 8003258:	0412      	lsls	r2, r2, #16
 800325a:	4603      	mov	r3, r0
 800325c:	b9b2      	cbnz	r2, 800328c <__hi0bits+0x36>
 800325e:	0403      	lsls	r3, r0, #16
 8003260:	2010      	movs	r0, #16
 8003262:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003266:	bf04      	itt	eq
 8003268:	021b      	lsleq	r3, r3, #8
 800326a:	3008      	addeq	r0, #8
 800326c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003270:	bf04      	itt	eq
 8003272:	011b      	lsleq	r3, r3, #4
 8003274:	3004      	addeq	r0, #4
 8003276:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800327a:	bf04      	itt	eq
 800327c:	009b      	lsleq	r3, r3, #2
 800327e:	3002      	addeq	r0, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	db06      	blt.n	8003292 <__hi0bits+0x3c>
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	d503      	bpl.n	8003290 <__hi0bits+0x3a>
 8003288:	3001      	adds	r0, #1
 800328a:	4770      	bx	lr
 800328c:	2000      	movs	r0, #0
 800328e:	e7e8      	b.n	8003262 <__hi0bits+0xc>
 8003290:	2020      	movs	r0, #32
 8003292:	4770      	bx	lr

08003294 <__lo0bits>:
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	4601      	mov	r1, r0
 8003298:	f013 0207 	ands.w	r2, r3, #7
 800329c:	d00b      	beq.n	80032b6 <__lo0bits+0x22>
 800329e:	07da      	lsls	r2, r3, #31
 80032a0:	d423      	bmi.n	80032ea <__lo0bits+0x56>
 80032a2:	0798      	lsls	r0, r3, #30
 80032a4:	bf49      	itett	mi
 80032a6:	085b      	lsrmi	r3, r3, #1
 80032a8:	089b      	lsrpl	r3, r3, #2
 80032aa:	2001      	movmi	r0, #1
 80032ac:	600b      	strmi	r3, [r1, #0]
 80032ae:	bf5c      	itt	pl
 80032b0:	600b      	strpl	r3, [r1, #0]
 80032b2:	2002      	movpl	r0, #2
 80032b4:	4770      	bx	lr
 80032b6:	b298      	uxth	r0, r3
 80032b8:	b9a8      	cbnz	r0, 80032e6 <__lo0bits+0x52>
 80032ba:	2010      	movs	r0, #16
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80032c2:	bf04      	itt	eq
 80032c4:	0a1b      	lsreq	r3, r3, #8
 80032c6:	3008      	addeq	r0, #8
 80032c8:	071a      	lsls	r2, r3, #28
 80032ca:	bf04      	itt	eq
 80032cc:	091b      	lsreq	r3, r3, #4
 80032ce:	3004      	addeq	r0, #4
 80032d0:	079a      	lsls	r2, r3, #30
 80032d2:	bf04      	itt	eq
 80032d4:	089b      	lsreq	r3, r3, #2
 80032d6:	3002      	addeq	r0, #2
 80032d8:	07da      	lsls	r2, r3, #31
 80032da:	d402      	bmi.n	80032e2 <__lo0bits+0x4e>
 80032dc:	085b      	lsrs	r3, r3, #1
 80032de:	d006      	beq.n	80032ee <__lo0bits+0x5a>
 80032e0:	3001      	adds	r0, #1
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	4770      	bx	lr
 80032e6:	4610      	mov	r0, r2
 80032e8:	e7e9      	b.n	80032be <__lo0bits+0x2a>
 80032ea:	2000      	movs	r0, #0
 80032ec:	4770      	bx	lr
 80032ee:	2020      	movs	r0, #32
 80032f0:	4770      	bx	lr

080032f2 <__i2b>:
 80032f2:	b510      	push	{r4, lr}
 80032f4:	460c      	mov	r4, r1
 80032f6:	2101      	movs	r1, #1
 80032f8:	f7ff ff27 	bl	800314a <_Balloc>
 80032fc:	2201      	movs	r2, #1
 80032fe:	6144      	str	r4, [r0, #20]
 8003300:	6102      	str	r2, [r0, #16]
 8003302:	bd10      	pop	{r4, pc}

08003304 <__multiply>:
 8003304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	4614      	mov	r4, r2
 800330a:	690a      	ldr	r2, [r1, #16]
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	4688      	mov	r8, r1
 8003310:	429a      	cmp	r2, r3
 8003312:	bfbe      	ittt	lt
 8003314:	460b      	movlt	r3, r1
 8003316:	46a0      	movlt	r8, r4
 8003318:	461c      	movlt	r4, r3
 800331a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800331e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003326:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800332a:	eb07 0609 	add.w	r6, r7, r9
 800332e:	42b3      	cmp	r3, r6
 8003330:	bfb8      	it	lt
 8003332:	3101      	addlt	r1, #1
 8003334:	f7ff ff09 	bl	800314a <_Balloc>
 8003338:	f100 0514 	add.w	r5, r0, #20
 800333c:	462b      	mov	r3, r5
 800333e:	2200      	movs	r2, #0
 8003340:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003344:	4573      	cmp	r3, lr
 8003346:	d316      	bcc.n	8003376 <__multiply+0x72>
 8003348:	f104 0214 	add.w	r2, r4, #20
 800334c:	f108 0114 	add.w	r1, r8, #20
 8003350:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003354:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	9b00      	ldr	r3, [sp, #0]
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	4293      	cmp	r3, r2
 8003360:	d80c      	bhi.n	800337c <__multiply+0x78>
 8003362:	2e00      	cmp	r6, #0
 8003364:	dd03      	ble.n	800336e <__multiply+0x6a>
 8003366:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800336a:	2b00      	cmp	r3, #0
 800336c:	d05d      	beq.n	800342a <__multiply+0x126>
 800336e:	6106      	str	r6, [r0, #16]
 8003370:	b003      	add	sp, #12
 8003372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003376:	f843 2b04 	str.w	r2, [r3], #4
 800337a:	e7e3      	b.n	8003344 <__multiply+0x40>
 800337c:	f8b2 b000 	ldrh.w	fp, [r2]
 8003380:	f1bb 0f00 	cmp.w	fp, #0
 8003384:	d023      	beq.n	80033ce <__multiply+0xca>
 8003386:	4689      	mov	r9, r1
 8003388:	46ac      	mov	ip, r5
 800338a:	f04f 0800 	mov.w	r8, #0
 800338e:	f859 4b04 	ldr.w	r4, [r9], #4
 8003392:	f8dc a000 	ldr.w	sl, [ip]
 8003396:	b2a3      	uxth	r3, r4
 8003398:	fa1f fa8a 	uxth.w	sl, sl
 800339c:	fb0b a303 	mla	r3, fp, r3, sl
 80033a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80033a4:	f8dc 4000 	ldr.w	r4, [ip]
 80033a8:	4443      	add	r3, r8
 80033aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80033ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80033b2:	46e2      	mov	sl, ip
 80033b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80033be:	454f      	cmp	r7, r9
 80033c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80033c4:	f84a 3b04 	str.w	r3, [sl], #4
 80033c8:	d82b      	bhi.n	8003422 <__multiply+0x11e>
 80033ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	3204      	adds	r2, #4
 80033d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80033d6:	f1ba 0f00 	cmp.w	sl, #0
 80033da:	d020      	beq.n	800341e <__multiply+0x11a>
 80033dc:	4689      	mov	r9, r1
 80033de:	46a8      	mov	r8, r5
 80033e0:	f04f 0b00 	mov.w	fp, #0
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80033ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80033f4:	46c4      	mov	ip, r8
 80033f6:	445c      	add	r4, fp
 80033f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80033fc:	f84c 3b04 	str.w	r3, [ip], #4
 8003400:	f859 3b04 	ldr.w	r3, [r9], #4
 8003404:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	fb0a b303 	mla	r3, sl, r3, fp
 800340e:	454f      	cmp	r7, r9
 8003410:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003414:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003418:	d805      	bhi.n	8003426 <__multiply+0x122>
 800341a:	f8c8 3004 	str.w	r3, [r8, #4]
 800341e:	3504      	adds	r5, #4
 8003420:	e79b      	b.n	800335a <__multiply+0x56>
 8003422:	46d4      	mov	ip, sl
 8003424:	e7b3      	b.n	800338e <__multiply+0x8a>
 8003426:	46e0      	mov	r8, ip
 8003428:	e7dd      	b.n	80033e6 <__multiply+0xe2>
 800342a:	3e01      	subs	r6, #1
 800342c:	e799      	b.n	8003362 <__multiply+0x5e>
	...

08003430 <__pow5mult>:
 8003430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003434:	4615      	mov	r5, r2
 8003436:	f012 0203 	ands.w	r2, r2, #3
 800343a:	4606      	mov	r6, r0
 800343c:	460f      	mov	r7, r1
 800343e:	d007      	beq.n	8003450 <__pow5mult+0x20>
 8003440:	4c21      	ldr	r4, [pc, #132]	; (80034c8 <__pow5mult+0x98>)
 8003442:	3a01      	subs	r2, #1
 8003444:	2300      	movs	r3, #0
 8003446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800344a:	f7ff fec9 	bl	80031e0 <__multadd>
 800344e:	4607      	mov	r7, r0
 8003450:	10ad      	asrs	r5, r5, #2
 8003452:	d035      	beq.n	80034c0 <__pow5mult+0x90>
 8003454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003456:	b93c      	cbnz	r4, 8003468 <__pow5mult+0x38>
 8003458:	2010      	movs	r0, #16
 800345a:	f7ff fe63 	bl	8003124 <malloc>
 800345e:	6270      	str	r0, [r6, #36]	; 0x24
 8003460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003464:	6004      	str	r4, [r0, #0]
 8003466:	60c4      	str	r4, [r0, #12]
 8003468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800346c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003470:	b94c      	cbnz	r4, 8003486 <__pow5mult+0x56>
 8003472:	f240 2171 	movw	r1, #625	; 0x271
 8003476:	4630      	mov	r0, r6
 8003478:	f7ff ff3b 	bl	80032f2 <__i2b>
 800347c:	2300      	movs	r3, #0
 800347e:	4604      	mov	r4, r0
 8003480:	f8c8 0008 	str.w	r0, [r8, #8]
 8003484:	6003      	str	r3, [r0, #0]
 8003486:	f04f 0800 	mov.w	r8, #0
 800348a:	07eb      	lsls	r3, r5, #31
 800348c:	d50a      	bpl.n	80034a4 <__pow5mult+0x74>
 800348e:	4639      	mov	r1, r7
 8003490:	4622      	mov	r2, r4
 8003492:	4630      	mov	r0, r6
 8003494:	f7ff ff36 	bl	8003304 <__multiply>
 8003498:	4681      	mov	r9, r0
 800349a:	4639      	mov	r1, r7
 800349c:	4630      	mov	r0, r6
 800349e:	f7ff fe88 	bl	80031b2 <_Bfree>
 80034a2:	464f      	mov	r7, r9
 80034a4:	106d      	asrs	r5, r5, #1
 80034a6:	d00b      	beq.n	80034c0 <__pow5mult+0x90>
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	b938      	cbnz	r0, 80034bc <__pow5mult+0x8c>
 80034ac:	4622      	mov	r2, r4
 80034ae:	4621      	mov	r1, r4
 80034b0:	4630      	mov	r0, r6
 80034b2:	f7ff ff27 	bl	8003304 <__multiply>
 80034b6:	6020      	str	r0, [r4, #0]
 80034b8:	f8c0 8000 	str.w	r8, [r0]
 80034bc:	4604      	mov	r4, r0
 80034be:	e7e4      	b.n	800348a <__pow5mult+0x5a>
 80034c0:	4638      	mov	r0, r7
 80034c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034c6:	bf00      	nop
 80034c8:	08003988 	.word	0x08003988

080034cc <__lshift>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	460c      	mov	r4, r1
 80034d2:	4607      	mov	r7, r0
 80034d4:	4616      	mov	r6, r2
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80034dc:	eb0a 0903 	add.w	r9, sl, r3
 80034e0:	6849      	ldr	r1, [r1, #4]
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	f109 0501 	add.w	r5, r9, #1
 80034e8:	42ab      	cmp	r3, r5
 80034ea:	db32      	blt.n	8003552 <__lshift+0x86>
 80034ec:	4638      	mov	r0, r7
 80034ee:	f7ff fe2c 	bl	800314a <_Balloc>
 80034f2:	2300      	movs	r3, #0
 80034f4:	4680      	mov	r8, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	f100 0114 	add.w	r1, r0, #20
 80034fc:	4553      	cmp	r3, sl
 80034fe:	db2b      	blt.n	8003558 <__lshift+0x8c>
 8003500:	6920      	ldr	r0, [r4, #16]
 8003502:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003506:	f104 0314 	add.w	r3, r4, #20
 800350a:	f016 021f 	ands.w	r2, r6, #31
 800350e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003512:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003516:	d025      	beq.n	8003564 <__lshift+0x98>
 8003518:	2000      	movs	r0, #0
 800351a:	f1c2 0e20 	rsb	lr, r2, #32
 800351e:	468a      	mov	sl, r1
 8003520:	681e      	ldr	r6, [r3, #0]
 8003522:	4096      	lsls	r6, r2
 8003524:	4330      	orrs	r0, r6
 8003526:	f84a 0b04 	str.w	r0, [sl], #4
 800352a:	f853 0b04 	ldr.w	r0, [r3], #4
 800352e:	459c      	cmp	ip, r3
 8003530:	fa20 f00e 	lsr.w	r0, r0, lr
 8003534:	d814      	bhi.n	8003560 <__lshift+0x94>
 8003536:	6048      	str	r0, [r1, #4]
 8003538:	b108      	cbz	r0, 800353e <__lshift+0x72>
 800353a:	f109 0502 	add.w	r5, r9, #2
 800353e:	3d01      	subs	r5, #1
 8003540:	4638      	mov	r0, r7
 8003542:	f8c8 5010 	str.w	r5, [r8, #16]
 8003546:	4621      	mov	r1, r4
 8003548:	f7ff fe33 	bl	80031b2 <_Bfree>
 800354c:	4640      	mov	r0, r8
 800354e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003552:	3101      	adds	r1, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	e7c7      	b.n	80034e8 <__lshift+0x1c>
 8003558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800355c:	3301      	adds	r3, #1
 800355e:	e7cd      	b.n	80034fc <__lshift+0x30>
 8003560:	4651      	mov	r1, sl
 8003562:	e7dc      	b.n	800351e <__lshift+0x52>
 8003564:	3904      	subs	r1, #4
 8003566:	f853 2b04 	ldr.w	r2, [r3], #4
 800356a:	459c      	cmp	ip, r3
 800356c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003570:	d8f9      	bhi.n	8003566 <__lshift+0x9a>
 8003572:	e7e4      	b.n	800353e <__lshift+0x72>

08003574 <__mcmp>:
 8003574:	6903      	ldr	r3, [r0, #16]
 8003576:	690a      	ldr	r2, [r1, #16]
 8003578:	b530      	push	{r4, r5, lr}
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	d10c      	bne.n	8003598 <__mcmp+0x24>
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	3014      	adds	r0, #20
 8003582:	3114      	adds	r1, #20
 8003584:	1884      	adds	r4, r0, r2
 8003586:	4411      	add	r1, r2
 8003588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800358c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003590:	4295      	cmp	r5, r2
 8003592:	d003      	beq.n	800359c <__mcmp+0x28>
 8003594:	d305      	bcc.n	80035a2 <__mcmp+0x2e>
 8003596:	2301      	movs	r3, #1
 8003598:	4618      	mov	r0, r3
 800359a:	bd30      	pop	{r4, r5, pc}
 800359c:	42a0      	cmp	r0, r4
 800359e:	d3f3      	bcc.n	8003588 <__mcmp+0x14>
 80035a0:	e7fa      	b.n	8003598 <__mcmp+0x24>
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	e7f7      	b.n	8003598 <__mcmp+0x24>

080035a8 <__mdiff>:
 80035a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	460d      	mov	r5, r1
 80035ae:	4607      	mov	r7, r0
 80035b0:	4611      	mov	r1, r2
 80035b2:	4628      	mov	r0, r5
 80035b4:	4614      	mov	r4, r2
 80035b6:	f7ff ffdd 	bl	8003574 <__mcmp>
 80035ba:	1e06      	subs	r6, r0, #0
 80035bc:	d108      	bne.n	80035d0 <__mdiff+0x28>
 80035be:	4631      	mov	r1, r6
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff fdc2 	bl	800314a <_Balloc>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	bfa4      	itt	ge
 80035d2:	4623      	movge	r3, r4
 80035d4:	462c      	movge	r4, r5
 80035d6:	4638      	mov	r0, r7
 80035d8:	6861      	ldr	r1, [r4, #4]
 80035da:	bfa6      	itte	ge
 80035dc:	461d      	movge	r5, r3
 80035de:	2600      	movge	r6, #0
 80035e0:	2601      	movlt	r6, #1
 80035e2:	f7ff fdb2 	bl	800314a <_Balloc>
 80035e6:	f04f 0e00 	mov.w	lr, #0
 80035ea:	60c6      	str	r6, [r0, #12]
 80035ec:	692b      	ldr	r3, [r5, #16]
 80035ee:	6926      	ldr	r6, [r4, #16]
 80035f0:	f104 0214 	add.w	r2, r4, #20
 80035f4:	f105 0914 	add.w	r9, r5, #20
 80035f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80035fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003600:	f100 0114 	add.w	r1, r0, #20
 8003604:	f852 ab04 	ldr.w	sl, [r2], #4
 8003608:	f859 5b04 	ldr.w	r5, [r9], #4
 800360c:	fa1f f38a 	uxth.w	r3, sl
 8003610:	4473      	add	r3, lr
 8003612:	b2ac      	uxth	r4, r5
 8003614:	1b1b      	subs	r3, r3, r4
 8003616:	0c2c      	lsrs	r4, r5, #16
 8003618:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800361c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003620:	b29b      	uxth	r3, r3
 8003622:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003626:	45c8      	cmp	r8, r9
 8003628:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800362c:	4694      	mov	ip, r2
 800362e:	f841 4b04 	str.w	r4, [r1], #4
 8003632:	d8e7      	bhi.n	8003604 <__mdiff+0x5c>
 8003634:	45bc      	cmp	ip, r7
 8003636:	d304      	bcc.n	8003642 <__mdiff+0x9a>
 8003638:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800363c:	b183      	cbz	r3, 8003660 <__mdiff+0xb8>
 800363e:	6106      	str	r6, [r0, #16]
 8003640:	e7c4      	b.n	80035cc <__mdiff+0x24>
 8003642:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003646:	b2a2      	uxth	r2, r4
 8003648:	4472      	add	r2, lr
 800364a:	1413      	asrs	r3, r2, #16
 800364c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003650:	b292      	uxth	r2, r2
 8003652:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003656:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800365a:	f841 2b04 	str.w	r2, [r1], #4
 800365e:	e7e9      	b.n	8003634 <__mdiff+0x8c>
 8003660:	3e01      	subs	r6, #1
 8003662:	e7e9      	b.n	8003638 <__mdiff+0x90>

08003664 <__d2b>:
 8003664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003668:	461c      	mov	r4, r3
 800366a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800366e:	2101      	movs	r1, #1
 8003670:	4690      	mov	r8, r2
 8003672:	f7ff fd6a 	bl	800314a <_Balloc>
 8003676:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800367a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800367e:	4607      	mov	r7, r0
 8003680:	bb34      	cbnz	r4, 80036d0 <__d2b+0x6c>
 8003682:	9201      	str	r2, [sp, #4]
 8003684:	f1b8 0200 	subs.w	r2, r8, #0
 8003688:	d027      	beq.n	80036da <__d2b+0x76>
 800368a:	a802      	add	r0, sp, #8
 800368c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003690:	f7ff fe00 	bl	8003294 <__lo0bits>
 8003694:	9900      	ldr	r1, [sp, #0]
 8003696:	b1f0      	cbz	r0, 80036d6 <__d2b+0x72>
 8003698:	9a01      	ldr	r2, [sp, #4]
 800369a:	f1c0 0320 	rsb	r3, r0, #32
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	430b      	orrs	r3, r1
 80036a4:	40c2      	lsrs	r2, r0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	9201      	str	r2, [sp, #4]
 80036aa:	9b01      	ldr	r3, [sp, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2102      	movne	r1, #2
 80036b2:	2101      	moveq	r1, #1
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	6139      	str	r1, [r7, #16]
 80036b8:	b1c4      	cbz	r4, 80036ec <__d2b+0x88>
 80036ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80036be:	4404      	add	r4, r0
 80036c0:	6034      	str	r4, [r6, #0]
 80036c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80036c6:	6028      	str	r0, [r5, #0]
 80036c8:	4638      	mov	r0, r7
 80036ca:	b002      	add	sp, #8
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036d4:	e7d5      	b.n	8003682 <__d2b+0x1e>
 80036d6:	6179      	str	r1, [r7, #20]
 80036d8:	e7e7      	b.n	80036aa <__d2b+0x46>
 80036da:	a801      	add	r0, sp, #4
 80036dc:	f7ff fdda 	bl	8003294 <__lo0bits>
 80036e0:	2101      	movs	r1, #1
 80036e2:	9b01      	ldr	r3, [sp, #4]
 80036e4:	6139      	str	r1, [r7, #16]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	3020      	adds	r0, #32
 80036ea:	e7e5      	b.n	80036b8 <__d2b+0x54>
 80036ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80036f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80036f4:	6030      	str	r0, [r6, #0]
 80036f6:	6918      	ldr	r0, [r3, #16]
 80036f8:	f7ff fdad 	bl	8003256 <__hi0bits>
 80036fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003700:	e7e1      	b.n	80036c6 <__d2b+0x62>

08003702 <_calloc_r>:
 8003702:	b538      	push	{r3, r4, r5, lr}
 8003704:	fb02 f401 	mul.w	r4, r2, r1
 8003708:	4621      	mov	r1, r4
 800370a:	f000 f809 	bl	8003720 <_malloc_r>
 800370e:	4605      	mov	r5, r0
 8003710:	b118      	cbz	r0, 800371a <_calloc_r+0x18>
 8003712:	4622      	mov	r2, r4
 8003714:	2100      	movs	r1, #0
 8003716:	f7fe fb6f 	bl	8001df8 <memset>
 800371a:	4628      	mov	r0, r5
 800371c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003720 <_malloc_r>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	1ccd      	adds	r5, r1, #3
 8003724:	f025 0503 	bic.w	r5, r5, #3
 8003728:	3508      	adds	r5, #8
 800372a:	2d0c      	cmp	r5, #12
 800372c:	bf38      	it	cc
 800372e:	250c      	movcc	r5, #12
 8003730:	2d00      	cmp	r5, #0
 8003732:	4606      	mov	r6, r0
 8003734:	db01      	blt.n	800373a <_malloc_r+0x1a>
 8003736:	42a9      	cmp	r1, r5
 8003738:	d903      	bls.n	8003742 <_malloc_r+0x22>
 800373a:	230c      	movs	r3, #12
 800373c:	6033      	str	r3, [r6, #0]
 800373e:	2000      	movs	r0, #0
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	f000 f869 	bl	8003818 <__malloc_lock>
 8003746:	4a21      	ldr	r2, [pc, #132]	; (80037cc <_malloc_r+0xac>)
 8003748:	6814      	ldr	r4, [r2, #0]
 800374a:	4621      	mov	r1, r4
 800374c:	b991      	cbnz	r1, 8003774 <_malloc_r+0x54>
 800374e:	4c20      	ldr	r4, [pc, #128]	; (80037d0 <_malloc_r+0xb0>)
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	b91b      	cbnz	r3, 800375c <_malloc_r+0x3c>
 8003754:	4630      	mov	r0, r6
 8003756:	f000 f83d 	bl	80037d4 <_sbrk_r>
 800375a:	6020      	str	r0, [r4, #0]
 800375c:	4629      	mov	r1, r5
 800375e:	4630      	mov	r0, r6
 8003760:	f000 f838 	bl	80037d4 <_sbrk_r>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d124      	bne.n	80037b2 <_malloc_r+0x92>
 8003768:	230c      	movs	r3, #12
 800376a:	4630      	mov	r0, r6
 800376c:	6033      	str	r3, [r6, #0]
 800376e:	f000 f854 	bl	800381a <__malloc_unlock>
 8003772:	e7e4      	b.n	800373e <_malloc_r+0x1e>
 8003774:	680b      	ldr	r3, [r1, #0]
 8003776:	1b5b      	subs	r3, r3, r5
 8003778:	d418      	bmi.n	80037ac <_malloc_r+0x8c>
 800377a:	2b0b      	cmp	r3, #11
 800377c:	d90f      	bls.n	800379e <_malloc_r+0x7e>
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	18cc      	adds	r4, r1, r3
 8003782:	50cd      	str	r5, [r1, r3]
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f848 	bl	800381a <__malloc_unlock>
 800378a:	f104 000b 	add.w	r0, r4, #11
 800378e:	1d23      	adds	r3, r4, #4
 8003790:	f020 0007 	bic.w	r0, r0, #7
 8003794:	1ac3      	subs	r3, r0, r3
 8003796:	d0d3      	beq.n	8003740 <_malloc_r+0x20>
 8003798:	425a      	negs	r2, r3
 800379a:	50e2      	str	r2, [r4, r3]
 800379c:	e7d0      	b.n	8003740 <_malloc_r+0x20>
 800379e:	684b      	ldr	r3, [r1, #4]
 80037a0:	428c      	cmp	r4, r1
 80037a2:	bf16      	itet	ne
 80037a4:	6063      	strne	r3, [r4, #4]
 80037a6:	6013      	streq	r3, [r2, #0]
 80037a8:	460c      	movne	r4, r1
 80037aa:	e7eb      	b.n	8003784 <_malloc_r+0x64>
 80037ac:	460c      	mov	r4, r1
 80037ae:	6849      	ldr	r1, [r1, #4]
 80037b0:	e7cc      	b.n	800374c <_malloc_r+0x2c>
 80037b2:	1cc4      	adds	r4, r0, #3
 80037b4:	f024 0403 	bic.w	r4, r4, #3
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d005      	beq.n	80037c8 <_malloc_r+0xa8>
 80037bc:	1a21      	subs	r1, r4, r0
 80037be:	4630      	mov	r0, r6
 80037c0:	f000 f808 	bl	80037d4 <_sbrk_r>
 80037c4:	3001      	adds	r0, #1
 80037c6:	d0cf      	beq.n	8003768 <_malloc_r+0x48>
 80037c8:	6025      	str	r5, [r4, #0]
 80037ca:	e7db      	b.n	8003784 <_malloc_r+0x64>
 80037cc:	200001fc 	.word	0x200001fc
 80037d0:	20000200 	.word	0x20000200

080037d4 <_sbrk_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	2300      	movs	r3, #0
 80037d8:	4c05      	ldr	r4, [pc, #20]	; (80037f0 <_sbrk_r+0x1c>)
 80037da:	4605      	mov	r5, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	f7fd faf6 	bl	8000dd0 <_sbrk>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d102      	bne.n	80037ee <_sbrk_r+0x1a>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	b103      	cbz	r3, 80037ee <_sbrk_r+0x1a>
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	20000230 	.word	0x20000230

080037f4 <__ascii_mbtowc>:
 80037f4:	b082      	sub	sp, #8
 80037f6:	b901      	cbnz	r1, 80037fa <__ascii_mbtowc+0x6>
 80037f8:	a901      	add	r1, sp, #4
 80037fa:	b142      	cbz	r2, 800380e <__ascii_mbtowc+0x1a>
 80037fc:	b14b      	cbz	r3, 8003812 <__ascii_mbtowc+0x1e>
 80037fe:	7813      	ldrb	r3, [r2, #0]
 8003800:	600b      	str	r3, [r1, #0]
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	1c10      	adds	r0, r2, #0
 8003806:	bf18      	it	ne
 8003808:	2001      	movne	r0, #1
 800380a:	b002      	add	sp, #8
 800380c:	4770      	bx	lr
 800380e:	4610      	mov	r0, r2
 8003810:	e7fb      	b.n	800380a <__ascii_mbtowc+0x16>
 8003812:	f06f 0001 	mvn.w	r0, #1
 8003816:	e7f8      	b.n	800380a <__ascii_mbtowc+0x16>

08003818 <__malloc_lock>:
 8003818:	4770      	bx	lr

0800381a <__malloc_unlock>:
 800381a:	4770      	bx	lr

0800381c <__ascii_wctomb>:
 800381c:	b149      	cbz	r1, 8003832 <__ascii_wctomb+0x16>
 800381e:	2aff      	cmp	r2, #255	; 0xff
 8003820:	bf8b      	itete	hi
 8003822:	238a      	movhi	r3, #138	; 0x8a
 8003824:	700a      	strbls	r2, [r1, #0]
 8003826:	6003      	strhi	r3, [r0, #0]
 8003828:	2001      	movls	r0, #1
 800382a:	bf88      	it	hi
 800382c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003830:	4770      	bx	lr
 8003832:	4608      	mov	r0, r1
 8003834:	4770      	bx	lr
	...

08003838 <_init>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	bf00      	nop
 800383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383e:	bc08      	pop	{r3}
 8003840:	469e      	mov	lr, r3
 8003842:	4770      	bx	lr

08003844 <_fini>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr
